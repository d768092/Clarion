// Copyright 2020 ConsenSys Software Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by goff (v0.3.6) DO NOT EDIT

// Package modp contains field arithmetic operations for modulus 1404447761611184302913519680303925573139044514798677009948672509044786529730476274474284979081308875165000889686495260606709295068862629863225370551870891596701311667381761603721111090634735110308227210563164107569048052205800491261514946176100212790338675864723330454999587858894372783631526221325189673559
package modp

// /!\ WARNING /!\
// this code has not been audited and is provided as-is. In particular,
// there is no security guarantees such as constant time implementation
// or side-channel attack resistance
// /!\ WARNING /!\

import (
	"crypto/rand"
	"encoding/binary"
	"io"
	"math/big"
	"math/bits"
	"strconv"
	"sync"
)

// Element represents a field element stored on 16 words (uint64)
// Element are assumed to be in Montgomery form in all methods
// field modulus q =
//
// 1404447761611184302913519680303925573139044514798677009948672509044786529730476274474284979081308875165000889686495260606709295068862629863225370551870891596701311667381761603721111090634735110308227210563164107569048052205800491261514946176100212790338675864723330454999587858894372783631526221325189673559
type Element [16]uint64

// Limbs number of 64 bits words needed to represent Element
const Limbs = 16

// Bits number bits needed to represent Element
const Bits = 1018

// field modulus stored as big.Int
var _modulus big.Int
var onceModulus sync.Once

// Modulus returns q as a big.Int
// q =
//
// 1404447761611184302913519680303925573139044514798677009948672509044786529730476274474284979081308875165000889686495260606709295068862629863225370551870891596701311667381761603721111090634735110308227210563164107569048052205800491261514946176100212790338675864723330454999587858894372783631526221325189673559
func Modulus() *big.Int {
	onceModulus.Do(func() {
		_modulus.SetString("1404447761611184302913519680303925573139044514798677009948672509044786529730476274474284979081308875165000889686495260606709295068862629863225370551870891596701311667381761603721111090634735110308227210563164107569048052205800491261514946176100212790338675864723330454999587858894372783631526221325189673559", 10)
	})
	return new(big.Int).Set(&_modulus)
}

// q (modulus)
var qElement = Element{
	422487,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	144115188075855872,
}

// rSquare
var rSquare = Element{
	2924466424528896,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
}

// Bytes returns the regular (non montgomery) value
// of z as a big-endian byte slice.
func (z *Element) Bytes() []byte {
	_z := z.ToRegular()
	var res [Limbs * 8]byte
	binary.BigEndian.PutUint64(res[120:128], _z[0])
	binary.BigEndian.PutUint64(res[112:120], _z[1])
	binary.BigEndian.PutUint64(res[104:112], _z[2])
	binary.BigEndian.PutUint64(res[96:104], _z[3])
	binary.BigEndian.PutUint64(res[88:96], _z[4])
	binary.BigEndian.PutUint64(res[80:88], _z[5])
	binary.BigEndian.PutUint64(res[72:80], _z[6])
	binary.BigEndian.PutUint64(res[64:72], _z[7])
	binary.BigEndian.PutUint64(res[56:64], _z[8])
	binary.BigEndian.PutUint64(res[48:56], _z[9])
	binary.BigEndian.PutUint64(res[40:48], _z[10])
	binary.BigEndian.PutUint64(res[32:40], _z[11])
	binary.BigEndian.PutUint64(res[24:32], _z[12])
	binary.BigEndian.PutUint64(res[16:24], _z[13])
	binary.BigEndian.PutUint64(res[8:16], _z[14])
	binary.BigEndian.PutUint64(res[0:8], _z[15])

	return res[:]
}

// SetBytes interprets e as the bytes of a big-endian unsigned integer,
// sets z to that value (in Montgomery form), and returns z.
func (z *Element) SetBytes(e []byte) *Element {
	var tmp big.Int
	tmp.SetBytes(e)
	z.SetBigInt(&tmp)
	return z
}

// SetUint64 z = v, sets z LSB to v (non-Montgomery form) and convert z to Montgomery form
func (z *Element) SetUint64(v uint64) *Element {
	*z = Element{v}
	return z.Mul(z, &rSquare) // z.ToMont()
}

// Set z = x
func (z *Element) Set(x *Element) *Element {
	z[0] = x[0]
	z[1] = x[1]
	z[2] = x[2]
	z[3] = x[3]
	z[4] = x[4]
	z[5] = x[5]
	z[6] = x[6]
	z[7] = x[7]
	z[8] = x[8]
	z[9] = x[9]
	z[10] = x[10]
	z[11] = x[11]
	z[12] = x[12]
	z[13] = x[13]
	z[14] = x[14]
	z[15] = x[15]
	return z
}

// SetInterface converts i1 from uint64, int, string, or Element, big.Int into Element
// panic if provided type is not supported
func (z *Element) SetInterface(i1 interface{}) *Element {
	switch c1 := i1.(type) {
	case Element:
		return z.Set(&c1)
	case *Element:
		return z.Set(c1)
	case uint64:
		return z.SetUint64(c1)
	case int:
		return z.SetString(strconv.Itoa(c1))
	case string:
		return z.SetString(c1)
	case *big.Int:
		return z.SetBigInt(c1)
	case big.Int:
		return z.SetBigInt(&c1)
	case []byte:
		return z.SetBytes(c1)
	default:
		panic("invalid type")
	}
}

// SetZero z = 0
func (z *Element) SetZero() *Element {
	z[0] = 0
	z[1] = 0
	z[2] = 0
	z[3] = 0
	z[4] = 0
	z[5] = 0
	z[6] = 0
	z[7] = 0
	z[8] = 0
	z[9] = 0
	z[10] = 0
	z[11] = 0
	z[12] = 0
	z[13] = 0
	z[14] = 0
	z[15] = 0
	return z
}

// SetOne z = 1 (in Montgomery form)
func (z *Element) SetOne() *Element {
	z[0] = 18446744073655895767
	z[1] = 18446744073709551615
	z[2] = 18446744073709551615
	z[3] = 18446744073709551615
	z[4] = 18446744073709551615
	z[5] = 18446744073709551615
	z[6] = 18446744073709551615
	z[7] = 18446744073709551615
	z[8] = 18446744073709551615
	z[9] = 18446744073709551615
	z[10] = 18446744073709551615
	z[11] = 18446744073709551615
	z[12] = 18446744073709551615
	z[13] = 18446744073709551615
	z[14] = 18446744073709551615
	z[15] = 144115188075855871
	return z
}

// Div z = x*y^-1 mod q
func (z *Element) Div(x, y *Element) *Element {
	var yInv Element
	yInv.Inverse(y)
	z.Mul(x, &yInv)
	return z
}

// Equal returns z == x
func (z *Element) Equal(x *Element) bool {
	return (z[15] == x[15]) && (z[14] == x[14]) && (z[13] == x[13]) && (z[12] == x[12]) && (z[11] == x[11]) && (z[10] == x[10]) && (z[9] == x[9]) && (z[8] == x[8]) && (z[7] == x[7]) && (z[6] == x[6]) && (z[5] == x[5]) && (z[4] == x[4]) && (z[3] == x[3]) && (z[2] == x[2]) && (z[1] == x[1]) && (z[0] == x[0])
}

// IsZero returns z == 0
func (z *Element) IsZero() bool {
	return (z[15] | z[14] | z[13] | z[12] | z[11] | z[10] | z[9] | z[8] | z[7] | z[6] | z[5] | z[4] | z[3] | z[2] | z[1] | z[0]) == 0
}

// SetRandom sets z to a random element < q
func (z *Element) SetRandom() *Element {
	bytes := make([]byte, 128)
	io.ReadFull(rand.Reader, bytes)
	z[0] = binary.BigEndian.Uint64(bytes[0:8])
	z[1] = binary.BigEndian.Uint64(bytes[8:16])
	z[2] = binary.BigEndian.Uint64(bytes[16:24])
	z[3] = binary.BigEndian.Uint64(bytes[24:32])
	z[4] = binary.BigEndian.Uint64(bytes[32:40])
	z[5] = binary.BigEndian.Uint64(bytes[40:48])
	z[6] = binary.BigEndian.Uint64(bytes[48:56])
	z[7] = binary.BigEndian.Uint64(bytes[56:64])
	z[8] = binary.BigEndian.Uint64(bytes[64:72])
	z[9] = binary.BigEndian.Uint64(bytes[72:80])
	z[10] = binary.BigEndian.Uint64(bytes[80:88])
	z[11] = binary.BigEndian.Uint64(bytes[88:96])
	z[12] = binary.BigEndian.Uint64(bytes[96:104])
	z[13] = binary.BigEndian.Uint64(bytes[104:112])
	z[14] = binary.BigEndian.Uint64(bytes[112:120])
	z[15] = binary.BigEndian.Uint64(bytes[120:128])
	z[15] %= 144115188075855872

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[15] < 144115188075855872 || (z[15] == 144115188075855872 && (z[14] < 0 || (z[14] == 0 && (z[13] < 0 || (z[13] == 0 && (z[12] < 0 || (z[12] == 0 && (z[11] < 0 || (z[11] == 0 && (z[10] < 0 || (z[10] == 0 && (z[9] < 0 || (z[9] == 0 && (z[8] < 0 || (z[8] == 0 && (z[7] < 0 || (z[7] == 0 && (z[6] < 0 || (z[6] == 0 && (z[5] < 0 || (z[5] == 0 && (z[4] < 0 || (z[4] == 0 && (z[3] < 0 || (z[3] == 0 && (z[2] < 0 || (z[2] == 0 && (z[1] < 0 || (z[1] == 0 && (z[0] < 422487))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 422487, 0)
		z[1], b = bits.Sub64(z[1], 0, b)
		z[2], b = bits.Sub64(z[2], 0, b)
		z[3], b = bits.Sub64(z[3], 0, b)
		z[4], b = bits.Sub64(z[4], 0, b)
		z[5], b = bits.Sub64(z[5], 0, b)
		z[6], b = bits.Sub64(z[6], 0, b)
		z[7], b = bits.Sub64(z[7], 0, b)
		z[8], b = bits.Sub64(z[8], 0, b)
		z[9], b = bits.Sub64(z[9], 0, b)
		z[10], b = bits.Sub64(z[10], 0, b)
		z[11], b = bits.Sub64(z[11], 0, b)
		z[12], b = bits.Sub64(z[12], 0, b)
		z[13], b = bits.Sub64(z[13], 0, b)
		z[14], b = bits.Sub64(z[14], 0, b)
		z[15], _ = bits.Sub64(z[15], 144115188075855872, b)
	}

	return z
}

// One returns 1 (in montgommery form)
func One() Element {
	var one Element
	one.SetOne()
	return one
}

// MulAssign is deprecated
// Deprecated: use Mul instead
func (z *Element) MulAssign(x *Element) *Element {
	return z.Mul(z, x)
}

// AddAssign is deprecated
// Deprecated: use Add instead
func (z *Element) AddAssign(x *Element) *Element {
	return z.Add(z, x)
}

// SubAssign is deprecated
// Deprecated: use Sub instead
func (z *Element) SubAssign(x *Element) *Element {
	return z.Sub(z, x)
}

// API with assembly impl

// Mul z = x * y mod q
// see https://hackmd.io/@zkteam/modular_multiplication
func (z *Element) Mul(x, y *Element) *Element {
	mul(z, x, y)
	return z
}

// Square z = x * x mod q
// see https://hackmd.io/@zkteam/modular_multiplication
func (z *Element) Square(x *Element) *Element {
	square(z, x)
	return z
}

// FromMont converts z in place (i.e. mutates) from Montgomery to regular representation
// sets and returns z = z * 1
func (z *Element) FromMont() *Element {
	fromMont(z)
	return z
}

// Add z = x + y mod q
func (z *Element) Add(x, y *Element) *Element {
	add(z, x, y)
	return z
}

// Double z = x + x mod q, aka Lsh 1
func (z *Element) Double(x *Element) *Element {
	double(z, x)
	return z
}

// Sub  z = x - y mod q
func (z *Element) Sub(x, y *Element) *Element {
	sub(z, x, y)
	return z
}

// Neg z = q - x
func (z *Element) Neg(x *Element) *Element {
	neg(z, x)
	return z
}

// Generic (no ADX instructions, no AMD64) versions of multiplication and squaring algorithms

func _mulGeneric(z, x, y *Element) {

	var t [17]uint64
	var D uint64
	var m, C uint64
	// -----------------------------------
	// First loop

	C, t[0] = bits.Mul64(y[0], x[0])
	C, t[1] = madd1(y[0], x[1], C)
	C, t[2] = madd1(y[0], x[2], C)
	C, t[3] = madd1(y[0], x[3], C)
	C, t[4] = madd1(y[0], x[4], C)
	C, t[5] = madd1(y[0], x[5], C)
	C, t[6] = madd1(y[0], x[6], C)
	C, t[7] = madd1(y[0], x[7], C)
	C, t[8] = madd1(y[0], x[8], C)
	C, t[9] = madd1(y[0], x[9], C)
	C, t[10] = madd1(y[0], x[10], C)
	C, t[11] = madd1(y[0], x[11], C)
	C, t[12] = madd1(y[0], x[12], C)
	C, t[13] = madd1(y[0], x[13], C)
	C, t[14] = madd1(y[0], x[14], C)
	C, t[15] = madd1(y[0], x[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9354599007894202009

	// -----------------------------------
	// Second loop
	C = madd0(m, 422487, t[0])

	C, t[0] = madd2(m, 0, t[1], C)

	C, t[1] = madd2(m, 0, t[2], C)

	C, t[2] = madd2(m, 0, t[3], C)

	C, t[3] = madd2(m, 0, t[4], C)

	C, t[4] = madd2(m, 0, t[5], C)

	C, t[5] = madd2(m, 0, t[6], C)

	C, t[6] = madd2(m, 0, t[7], C)

	C, t[7] = madd2(m, 0, t[8], C)

	C, t[8] = madd2(m, 0, t[9], C)

	C, t[9] = madd2(m, 0, t[10], C)

	C, t[10] = madd2(m, 0, t[11], C)

	C, t[11] = madd2(m, 0, t[12], C)

	C, t[12] = madd2(m, 0, t[13], C)

	C, t[13] = madd2(m, 0, t[14], C)

	C, t[14] = madd3(m, 144115188075855872, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[1], x[0], t[0])
	C, t[1] = madd2(y[1], x[1], t[1], C)
	C, t[2] = madd2(y[1], x[2], t[2], C)
	C, t[3] = madd2(y[1], x[3], t[3], C)
	C, t[4] = madd2(y[1], x[4], t[4], C)
	C, t[5] = madd2(y[1], x[5], t[5], C)
	C, t[6] = madd2(y[1], x[6], t[6], C)
	C, t[7] = madd2(y[1], x[7], t[7], C)
	C, t[8] = madd2(y[1], x[8], t[8], C)
	C, t[9] = madd2(y[1], x[9], t[9], C)
	C, t[10] = madd2(y[1], x[10], t[10], C)
	C, t[11] = madd2(y[1], x[11], t[11], C)
	C, t[12] = madd2(y[1], x[12], t[12], C)
	C, t[13] = madd2(y[1], x[13], t[13], C)
	C, t[14] = madd2(y[1], x[14], t[14], C)
	C, t[15] = madd2(y[1], x[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9354599007894202009

	// -----------------------------------
	// Second loop
	C = madd0(m, 422487, t[0])

	C, t[0] = madd2(m, 0, t[1], C)

	C, t[1] = madd2(m, 0, t[2], C)

	C, t[2] = madd2(m, 0, t[3], C)

	C, t[3] = madd2(m, 0, t[4], C)

	C, t[4] = madd2(m, 0, t[5], C)

	C, t[5] = madd2(m, 0, t[6], C)

	C, t[6] = madd2(m, 0, t[7], C)

	C, t[7] = madd2(m, 0, t[8], C)

	C, t[8] = madd2(m, 0, t[9], C)

	C, t[9] = madd2(m, 0, t[10], C)

	C, t[10] = madd2(m, 0, t[11], C)

	C, t[11] = madd2(m, 0, t[12], C)

	C, t[12] = madd2(m, 0, t[13], C)

	C, t[13] = madd2(m, 0, t[14], C)

	C, t[14] = madd3(m, 144115188075855872, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[2], x[0], t[0])
	C, t[1] = madd2(y[2], x[1], t[1], C)
	C, t[2] = madd2(y[2], x[2], t[2], C)
	C, t[3] = madd2(y[2], x[3], t[3], C)
	C, t[4] = madd2(y[2], x[4], t[4], C)
	C, t[5] = madd2(y[2], x[5], t[5], C)
	C, t[6] = madd2(y[2], x[6], t[6], C)
	C, t[7] = madd2(y[2], x[7], t[7], C)
	C, t[8] = madd2(y[2], x[8], t[8], C)
	C, t[9] = madd2(y[2], x[9], t[9], C)
	C, t[10] = madd2(y[2], x[10], t[10], C)
	C, t[11] = madd2(y[2], x[11], t[11], C)
	C, t[12] = madd2(y[2], x[12], t[12], C)
	C, t[13] = madd2(y[2], x[13], t[13], C)
	C, t[14] = madd2(y[2], x[14], t[14], C)
	C, t[15] = madd2(y[2], x[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9354599007894202009

	// -----------------------------------
	// Second loop
	C = madd0(m, 422487, t[0])

	C, t[0] = madd2(m, 0, t[1], C)

	C, t[1] = madd2(m, 0, t[2], C)

	C, t[2] = madd2(m, 0, t[3], C)

	C, t[3] = madd2(m, 0, t[4], C)

	C, t[4] = madd2(m, 0, t[5], C)

	C, t[5] = madd2(m, 0, t[6], C)

	C, t[6] = madd2(m, 0, t[7], C)

	C, t[7] = madd2(m, 0, t[8], C)

	C, t[8] = madd2(m, 0, t[9], C)

	C, t[9] = madd2(m, 0, t[10], C)

	C, t[10] = madd2(m, 0, t[11], C)

	C, t[11] = madd2(m, 0, t[12], C)

	C, t[12] = madd2(m, 0, t[13], C)

	C, t[13] = madd2(m, 0, t[14], C)

	C, t[14] = madd3(m, 144115188075855872, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[3], x[0], t[0])
	C, t[1] = madd2(y[3], x[1], t[1], C)
	C, t[2] = madd2(y[3], x[2], t[2], C)
	C, t[3] = madd2(y[3], x[3], t[3], C)
	C, t[4] = madd2(y[3], x[4], t[4], C)
	C, t[5] = madd2(y[3], x[5], t[5], C)
	C, t[6] = madd2(y[3], x[6], t[6], C)
	C, t[7] = madd2(y[3], x[7], t[7], C)
	C, t[8] = madd2(y[3], x[8], t[8], C)
	C, t[9] = madd2(y[3], x[9], t[9], C)
	C, t[10] = madd2(y[3], x[10], t[10], C)
	C, t[11] = madd2(y[3], x[11], t[11], C)
	C, t[12] = madd2(y[3], x[12], t[12], C)
	C, t[13] = madd2(y[3], x[13], t[13], C)
	C, t[14] = madd2(y[3], x[14], t[14], C)
	C, t[15] = madd2(y[3], x[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9354599007894202009

	// -----------------------------------
	// Second loop
	C = madd0(m, 422487, t[0])

	C, t[0] = madd2(m, 0, t[1], C)

	C, t[1] = madd2(m, 0, t[2], C)

	C, t[2] = madd2(m, 0, t[3], C)

	C, t[3] = madd2(m, 0, t[4], C)

	C, t[4] = madd2(m, 0, t[5], C)

	C, t[5] = madd2(m, 0, t[6], C)

	C, t[6] = madd2(m, 0, t[7], C)

	C, t[7] = madd2(m, 0, t[8], C)

	C, t[8] = madd2(m, 0, t[9], C)

	C, t[9] = madd2(m, 0, t[10], C)

	C, t[10] = madd2(m, 0, t[11], C)

	C, t[11] = madd2(m, 0, t[12], C)

	C, t[12] = madd2(m, 0, t[13], C)

	C, t[13] = madd2(m, 0, t[14], C)

	C, t[14] = madd3(m, 144115188075855872, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[4], x[0], t[0])
	C, t[1] = madd2(y[4], x[1], t[1], C)
	C, t[2] = madd2(y[4], x[2], t[2], C)
	C, t[3] = madd2(y[4], x[3], t[3], C)
	C, t[4] = madd2(y[4], x[4], t[4], C)
	C, t[5] = madd2(y[4], x[5], t[5], C)
	C, t[6] = madd2(y[4], x[6], t[6], C)
	C, t[7] = madd2(y[4], x[7], t[7], C)
	C, t[8] = madd2(y[4], x[8], t[8], C)
	C, t[9] = madd2(y[4], x[9], t[9], C)
	C, t[10] = madd2(y[4], x[10], t[10], C)
	C, t[11] = madd2(y[4], x[11], t[11], C)
	C, t[12] = madd2(y[4], x[12], t[12], C)
	C, t[13] = madd2(y[4], x[13], t[13], C)
	C, t[14] = madd2(y[4], x[14], t[14], C)
	C, t[15] = madd2(y[4], x[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9354599007894202009

	// -----------------------------------
	// Second loop
	C = madd0(m, 422487, t[0])

	C, t[0] = madd2(m, 0, t[1], C)

	C, t[1] = madd2(m, 0, t[2], C)

	C, t[2] = madd2(m, 0, t[3], C)

	C, t[3] = madd2(m, 0, t[4], C)

	C, t[4] = madd2(m, 0, t[5], C)

	C, t[5] = madd2(m, 0, t[6], C)

	C, t[6] = madd2(m, 0, t[7], C)

	C, t[7] = madd2(m, 0, t[8], C)

	C, t[8] = madd2(m, 0, t[9], C)

	C, t[9] = madd2(m, 0, t[10], C)

	C, t[10] = madd2(m, 0, t[11], C)

	C, t[11] = madd2(m, 0, t[12], C)

	C, t[12] = madd2(m, 0, t[13], C)

	C, t[13] = madd2(m, 0, t[14], C)

	C, t[14] = madd3(m, 144115188075855872, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[5], x[0], t[0])
	C, t[1] = madd2(y[5], x[1], t[1], C)
	C, t[2] = madd2(y[5], x[2], t[2], C)
	C, t[3] = madd2(y[5], x[3], t[3], C)
	C, t[4] = madd2(y[5], x[4], t[4], C)
	C, t[5] = madd2(y[5], x[5], t[5], C)
	C, t[6] = madd2(y[5], x[6], t[6], C)
	C, t[7] = madd2(y[5], x[7], t[7], C)
	C, t[8] = madd2(y[5], x[8], t[8], C)
	C, t[9] = madd2(y[5], x[9], t[9], C)
	C, t[10] = madd2(y[5], x[10], t[10], C)
	C, t[11] = madd2(y[5], x[11], t[11], C)
	C, t[12] = madd2(y[5], x[12], t[12], C)
	C, t[13] = madd2(y[5], x[13], t[13], C)
	C, t[14] = madd2(y[5], x[14], t[14], C)
	C, t[15] = madd2(y[5], x[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9354599007894202009

	// -----------------------------------
	// Second loop
	C = madd0(m, 422487, t[0])

	C, t[0] = madd2(m, 0, t[1], C)

	C, t[1] = madd2(m, 0, t[2], C)

	C, t[2] = madd2(m, 0, t[3], C)

	C, t[3] = madd2(m, 0, t[4], C)

	C, t[4] = madd2(m, 0, t[5], C)

	C, t[5] = madd2(m, 0, t[6], C)

	C, t[6] = madd2(m, 0, t[7], C)

	C, t[7] = madd2(m, 0, t[8], C)

	C, t[8] = madd2(m, 0, t[9], C)

	C, t[9] = madd2(m, 0, t[10], C)

	C, t[10] = madd2(m, 0, t[11], C)

	C, t[11] = madd2(m, 0, t[12], C)

	C, t[12] = madd2(m, 0, t[13], C)

	C, t[13] = madd2(m, 0, t[14], C)

	C, t[14] = madd3(m, 144115188075855872, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[6], x[0], t[0])
	C, t[1] = madd2(y[6], x[1], t[1], C)
	C, t[2] = madd2(y[6], x[2], t[2], C)
	C, t[3] = madd2(y[6], x[3], t[3], C)
	C, t[4] = madd2(y[6], x[4], t[4], C)
	C, t[5] = madd2(y[6], x[5], t[5], C)
	C, t[6] = madd2(y[6], x[6], t[6], C)
	C, t[7] = madd2(y[6], x[7], t[7], C)
	C, t[8] = madd2(y[6], x[8], t[8], C)
	C, t[9] = madd2(y[6], x[9], t[9], C)
	C, t[10] = madd2(y[6], x[10], t[10], C)
	C, t[11] = madd2(y[6], x[11], t[11], C)
	C, t[12] = madd2(y[6], x[12], t[12], C)
	C, t[13] = madd2(y[6], x[13], t[13], C)
	C, t[14] = madd2(y[6], x[14], t[14], C)
	C, t[15] = madd2(y[6], x[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9354599007894202009

	// -----------------------------------
	// Second loop
	C = madd0(m, 422487, t[0])

	C, t[0] = madd2(m, 0, t[1], C)

	C, t[1] = madd2(m, 0, t[2], C)

	C, t[2] = madd2(m, 0, t[3], C)

	C, t[3] = madd2(m, 0, t[4], C)

	C, t[4] = madd2(m, 0, t[5], C)

	C, t[5] = madd2(m, 0, t[6], C)

	C, t[6] = madd2(m, 0, t[7], C)

	C, t[7] = madd2(m, 0, t[8], C)

	C, t[8] = madd2(m, 0, t[9], C)

	C, t[9] = madd2(m, 0, t[10], C)

	C, t[10] = madd2(m, 0, t[11], C)

	C, t[11] = madd2(m, 0, t[12], C)

	C, t[12] = madd2(m, 0, t[13], C)

	C, t[13] = madd2(m, 0, t[14], C)

	C, t[14] = madd3(m, 144115188075855872, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[7], x[0], t[0])
	C, t[1] = madd2(y[7], x[1], t[1], C)
	C, t[2] = madd2(y[7], x[2], t[2], C)
	C, t[3] = madd2(y[7], x[3], t[3], C)
	C, t[4] = madd2(y[7], x[4], t[4], C)
	C, t[5] = madd2(y[7], x[5], t[5], C)
	C, t[6] = madd2(y[7], x[6], t[6], C)
	C, t[7] = madd2(y[7], x[7], t[7], C)
	C, t[8] = madd2(y[7], x[8], t[8], C)
	C, t[9] = madd2(y[7], x[9], t[9], C)
	C, t[10] = madd2(y[7], x[10], t[10], C)
	C, t[11] = madd2(y[7], x[11], t[11], C)
	C, t[12] = madd2(y[7], x[12], t[12], C)
	C, t[13] = madd2(y[7], x[13], t[13], C)
	C, t[14] = madd2(y[7], x[14], t[14], C)
	C, t[15] = madd2(y[7], x[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9354599007894202009

	// -----------------------------------
	// Second loop
	C = madd0(m, 422487, t[0])

	C, t[0] = madd2(m, 0, t[1], C)

	C, t[1] = madd2(m, 0, t[2], C)

	C, t[2] = madd2(m, 0, t[3], C)

	C, t[3] = madd2(m, 0, t[4], C)

	C, t[4] = madd2(m, 0, t[5], C)

	C, t[5] = madd2(m, 0, t[6], C)

	C, t[6] = madd2(m, 0, t[7], C)

	C, t[7] = madd2(m, 0, t[8], C)

	C, t[8] = madd2(m, 0, t[9], C)

	C, t[9] = madd2(m, 0, t[10], C)

	C, t[10] = madd2(m, 0, t[11], C)

	C, t[11] = madd2(m, 0, t[12], C)

	C, t[12] = madd2(m, 0, t[13], C)

	C, t[13] = madd2(m, 0, t[14], C)

	C, t[14] = madd3(m, 144115188075855872, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[8], x[0], t[0])
	C, t[1] = madd2(y[8], x[1], t[1], C)
	C, t[2] = madd2(y[8], x[2], t[2], C)
	C, t[3] = madd2(y[8], x[3], t[3], C)
	C, t[4] = madd2(y[8], x[4], t[4], C)
	C, t[5] = madd2(y[8], x[5], t[5], C)
	C, t[6] = madd2(y[8], x[6], t[6], C)
	C, t[7] = madd2(y[8], x[7], t[7], C)
	C, t[8] = madd2(y[8], x[8], t[8], C)
	C, t[9] = madd2(y[8], x[9], t[9], C)
	C, t[10] = madd2(y[8], x[10], t[10], C)
	C, t[11] = madd2(y[8], x[11], t[11], C)
	C, t[12] = madd2(y[8], x[12], t[12], C)
	C, t[13] = madd2(y[8], x[13], t[13], C)
	C, t[14] = madd2(y[8], x[14], t[14], C)
	C, t[15] = madd2(y[8], x[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9354599007894202009

	// -----------------------------------
	// Second loop
	C = madd0(m, 422487, t[0])

	C, t[0] = madd2(m, 0, t[1], C)

	C, t[1] = madd2(m, 0, t[2], C)

	C, t[2] = madd2(m, 0, t[3], C)

	C, t[3] = madd2(m, 0, t[4], C)

	C, t[4] = madd2(m, 0, t[5], C)

	C, t[5] = madd2(m, 0, t[6], C)

	C, t[6] = madd2(m, 0, t[7], C)

	C, t[7] = madd2(m, 0, t[8], C)

	C, t[8] = madd2(m, 0, t[9], C)

	C, t[9] = madd2(m, 0, t[10], C)

	C, t[10] = madd2(m, 0, t[11], C)

	C, t[11] = madd2(m, 0, t[12], C)

	C, t[12] = madd2(m, 0, t[13], C)

	C, t[13] = madd2(m, 0, t[14], C)

	C, t[14] = madd3(m, 144115188075855872, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[9], x[0], t[0])
	C, t[1] = madd2(y[9], x[1], t[1], C)
	C, t[2] = madd2(y[9], x[2], t[2], C)
	C, t[3] = madd2(y[9], x[3], t[3], C)
	C, t[4] = madd2(y[9], x[4], t[4], C)
	C, t[5] = madd2(y[9], x[5], t[5], C)
	C, t[6] = madd2(y[9], x[6], t[6], C)
	C, t[7] = madd2(y[9], x[7], t[7], C)
	C, t[8] = madd2(y[9], x[8], t[8], C)
	C, t[9] = madd2(y[9], x[9], t[9], C)
	C, t[10] = madd2(y[9], x[10], t[10], C)
	C, t[11] = madd2(y[9], x[11], t[11], C)
	C, t[12] = madd2(y[9], x[12], t[12], C)
	C, t[13] = madd2(y[9], x[13], t[13], C)
	C, t[14] = madd2(y[9], x[14], t[14], C)
	C, t[15] = madd2(y[9], x[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9354599007894202009

	// -----------------------------------
	// Second loop
	C = madd0(m, 422487, t[0])

	C, t[0] = madd2(m, 0, t[1], C)

	C, t[1] = madd2(m, 0, t[2], C)

	C, t[2] = madd2(m, 0, t[3], C)

	C, t[3] = madd2(m, 0, t[4], C)

	C, t[4] = madd2(m, 0, t[5], C)

	C, t[5] = madd2(m, 0, t[6], C)

	C, t[6] = madd2(m, 0, t[7], C)

	C, t[7] = madd2(m, 0, t[8], C)

	C, t[8] = madd2(m, 0, t[9], C)

	C, t[9] = madd2(m, 0, t[10], C)

	C, t[10] = madd2(m, 0, t[11], C)

	C, t[11] = madd2(m, 0, t[12], C)

	C, t[12] = madd2(m, 0, t[13], C)

	C, t[13] = madd2(m, 0, t[14], C)

	C, t[14] = madd3(m, 144115188075855872, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[10], x[0], t[0])
	C, t[1] = madd2(y[10], x[1], t[1], C)
	C, t[2] = madd2(y[10], x[2], t[2], C)
	C, t[3] = madd2(y[10], x[3], t[3], C)
	C, t[4] = madd2(y[10], x[4], t[4], C)
	C, t[5] = madd2(y[10], x[5], t[5], C)
	C, t[6] = madd2(y[10], x[6], t[6], C)
	C, t[7] = madd2(y[10], x[7], t[7], C)
	C, t[8] = madd2(y[10], x[8], t[8], C)
	C, t[9] = madd2(y[10], x[9], t[9], C)
	C, t[10] = madd2(y[10], x[10], t[10], C)
	C, t[11] = madd2(y[10], x[11], t[11], C)
	C, t[12] = madd2(y[10], x[12], t[12], C)
	C, t[13] = madd2(y[10], x[13], t[13], C)
	C, t[14] = madd2(y[10], x[14], t[14], C)
	C, t[15] = madd2(y[10], x[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9354599007894202009

	// -----------------------------------
	// Second loop
	C = madd0(m, 422487, t[0])

	C, t[0] = madd2(m, 0, t[1], C)

	C, t[1] = madd2(m, 0, t[2], C)

	C, t[2] = madd2(m, 0, t[3], C)

	C, t[3] = madd2(m, 0, t[4], C)

	C, t[4] = madd2(m, 0, t[5], C)

	C, t[5] = madd2(m, 0, t[6], C)

	C, t[6] = madd2(m, 0, t[7], C)

	C, t[7] = madd2(m, 0, t[8], C)

	C, t[8] = madd2(m, 0, t[9], C)

	C, t[9] = madd2(m, 0, t[10], C)

	C, t[10] = madd2(m, 0, t[11], C)

	C, t[11] = madd2(m, 0, t[12], C)

	C, t[12] = madd2(m, 0, t[13], C)

	C, t[13] = madd2(m, 0, t[14], C)

	C, t[14] = madd3(m, 144115188075855872, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[11], x[0], t[0])
	C, t[1] = madd2(y[11], x[1], t[1], C)
	C, t[2] = madd2(y[11], x[2], t[2], C)
	C, t[3] = madd2(y[11], x[3], t[3], C)
	C, t[4] = madd2(y[11], x[4], t[4], C)
	C, t[5] = madd2(y[11], x[5], t[5], C)
	C, t[6] = madd2(y[11], x[6], t[6], C)
	C, t[7] = madd2(y[11], x[7], t[7], C)
	C, t[8] = madd2(y[11], x[8], t[8], C)
	C, t[9] = madd2(y[11], x[9], t[9], C)
	C, t[10] = madd2(y[11], x[10], t[10], C)
	C, t[11] = madd2(y[11], x[11], t[11], C)
	C, t[12] = madd2(y[11], x[12], t[12], C)
	C, t[13] = madd2(y[11], x[13], t[13], C)
	C, t[14] = madd2(y[11], x[14], t[14], C)
	C, t[15] = madd2(y[11], x[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9354599007894202009

	// -----------------------------------
	// Second loop
	C = madd0(m, 422487, t[0])

	C, t[0] = madd2(m, 0, t[1], C)

	C, t[1] = madd2(m, 0, t[2], C)

	C, t[2] = madd2(m, 0, t[3], C)

	C, t[3] = madd2(m, 0, t[4], C)

	C, t[4] = madd2(m, 0, t[5], C)

	C, t[5] = madd2(m, 0, t[6], C)

	C, t[6] = madd2(m, 0, t[7], C)

	C, t[7] = madd2(m, 0, t[8], C)

	C, t[8] = madd2(m, 0, t[9], C)

	C, t[9] = madd2(m, 0, t[10], C)

	C, t[10] = madd2(m, 0, t[11], C)

	C, t[11] = madd2(m, 0, t[12], C)

	C, t[12] = madd2(m, 0, t[13], C)

	C, t[13] = madd2(m, 0, t[14], C)

	C, t[14] = madd3(m, 144115188075855872, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[12], x[0], t[0])
	C, t[1] = madd2(y[12], x[1], t[1], C)
	C, t[2] = madd2(y[12], x[2], t[2], C)
	C, t[3] = madd2(y[12], x[3], t[3], C)
	C, t[4] = madd2(y[12], x[4], t[4], C)
	C, t[5] = madd2(y[12], x[5], t[5], C)
	C, t[6] = madd2(y[12], x[6], t[6], C)
	C, t[7] = madd2(y[12], x[7], t[7], C)
	C, t[8] = madd2(y[12], x[8], t[8], C)
	C, t[9] = madd2(y[12], x[9], t[9], C)
	C, t[10] = madd2(y[12], x[10], t[10], C)
	C, t[11] = madd2(y[12], x[11], t[11], C)
	C, t[12] = madd2(y[12], x[12], t[12], C)
	C, t[13] = madd2(y[12], x[13], t[13], C)
	C, t[14] = madd2(y[12], x[14], t[14], C)
	C, t[15] = madd2(y[12], x[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9354599007894202009

	// -----------------------------------
	// Second loop
	C = madd0(m, 422487, t[0])

	C, t[0] = madd2(m, 0, t[1], C)

	C, t[1] = madd2(m, 0, t[2], C)

	C, t[2] = madd2(m, 0, t[3], C)

	C, t[3] = madd2(m, 0, t[4], C)

	C, t[4] = madd2(m, 0, t[5], C)

	C, t[5] = madd2(m, 0, t[6], C)

	C, t[6] = madd2(m, 0, t[7], C)

	C, t[7] = madd2(m, 0, t[8], C)

	C, t[8] = madd2(m, 0, t[9], C)

	C, t[9] = madd2(m, 0, t[10], C)

	C, t[10] = madd2(m, 0, t[11], C)

	C, t[11] = madd2(m, 0, t[12], C)

	C, t[12] = madd2(m, 0, t[13], C)

	C, t[13] = madd2(m, 0, t[14], C)

	C, t[14] = madd3(m, 144115188075855872, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[13], x[0], t[0])
	C, t[1] = madd2(y[13], x[1], t[1], C)
	C, t[2] = madd2(y[13], x[2], t[2], C)
	C, t[3] = madd2(y[13], x[3], t[3], C)
	C, t[4] = madd2(y[13], x[4], t[4], C)
	C, t[5] = madd2(y[13], x[5], t[5], C)
	C, t[6] = madd2(y[13], x[6], t[6], C)
	C, t[7] = madd2(y[13], x[7], t[7], C)
	C, t[8] = madd2(y[13], x[8], t[8], C)
	C, t[9] = madd2(y[13], x[9], t[9], C)
	C, t[10] = madd2(y[13], x[10], t[10], C)
	C, t[11] = madd2(y[13], x[11], t[11], C)
	C, t[12] = madd2(y[13], x[12], t[12], C)
	C, t[13] = madd2(y[13], x[13], t[13], C)
	C, t[14] = madd2(y[13], x[14], t[14], C)
	C, t[15] = madd2(y[13], x[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9354599007894202009

	// -----------------------------------
	// Second loop
	C = madd0(m, 422487, t[0])

	C, t[0] = madd2(m, 0, t[1], C)

	C, t[1] = madd2(m, 0, t[2], C)

	C, t[2] = madd2(m, 0, t[3], C)

	C, t[3] = madd2(m, 0, t[4], C)

	C, t[4] = madd2(m, 0, t[5], C)

	C, t[5] = madd2(m, 0, t[6], C)

	C, t[6] = madd2(m, 0, t[7], C)

	C, t[7] = madd2(m, 0, t[8], C)

	C, t[8] = madd2(m, 0, t[9], C)

	C, t[9] = madd2(m, 0, t[10], C)

	C, t[10] = madd2(m, 0, t[11], C)

	C, t[11] = madd2(m, 0, t[12], C)

	C, t[12] = madd2(m, 0, t[13], C)

	C, t[13] = madd2(m, 0, t[14], C)

	C, t[14] = madd3(m, 144115188075855872, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[14], x[0], t[0])
	C, t[1] = madd2(y[14], x[1], t[1], C)
	C, t[2] = madd2(y[14], x[2], t[2], C)
	C, t[3] = madd2(y[14], x[3], t[3], C)
	C, t[4] = madd2(y[14], x[4], t[4], C)
	C, t[5] = madd2(y[14], x[5], t[5], C)
	C, t[6] = madd2(y[14], x[6], t[6], C)
	C, t[7] = madd2(y[14], x[7], t[7], C)
	C, t[8] = madd2(y[14], x[8], t[8], C)
	C, t[9] = madd2(y[14], x[9], t[9], C)
	C, t[10] = madd2(y[14], x[10], t[10], C)
	C, t[11] = madd2(y[14], x[11], t[11], C)
	C, t[12] = madd2(y[14], x[12], t[12], C)
	C, t[13] = madd2(y[14], x[13], t[13], C)
	C, t[14] = madd2(y[14], x[14], t[14], C)
	C, t[15] = madd2(y[14], x[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9354599007894202009

	// -----------------------------------
	// Second loop
	C = madd0(m, 422487, t[0])

	C, t[0] = madd2(m, 0, t[1], C)

	C, t[1] = madd2(m, 0, t[2], C)

	C, t[2] = madd2(m, 0, t[3], C)

	C, t[3] = madd2(m, 0, t[4], C)

	C, t[4] = madd2(m, 0, t[5], C)

	C, t[5] = madd2(m, 0, t[6], C)

	C, t[6] = madd2(m, 0, t[7], C)

	C, t[7] = madd2(m, 0, t[8], C)

	C, t[8] = madd2(m, 0, t[9], C)

	C, t[9] = madd2(m, 0, t[10], C)

	C, t[10] = madd2(m, 0, t[11], C)

	C, t[11] = madd2(m, 0, t[12], C)

	C, t[12] = madd2(m, 0, t[13], C)

	C, t[13] = madd2(m, 0, t[14], C)

	C, t[14] = madd3(m, 144115188075855872, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[15], x[0], t[0])
	C, t[1] = madd2(y[15], x[1], t[1], C)
	C, t[2] = madd2(y[15], x[2], t[2], C)
	C, t[3] = madd2(y[15], x[3], t[3], C)
	C, t[4] = madd2(y[15], x[4], t[4], C)
	C, t[5] = madd2(y[15], x[5], t[5], C)
	C, t[6] = madd2(y[15], x[6], t[6], C)
	C, t[7] = madd2(y[15], x[7], t[7], C)
	C, t[8] = madd2(y[15], x[8], t[8], C)
	C, t[9] = madd2(y[15], x[9], t[9], C)
	C, t[10] = madd2(y[15], x[10], t[10], C)
	C, t[11] = madd2(y[15], x[11], t[11], C)
	C, t[12] = madd2(y[15], x[12], t[12], C)
	C, t[13] = madd2(y[15], x[13], t[13], C)
	C, t[14] = madd2(y[15], x[14], t[14], C)
	C, t[15] = madd2(y[15], x[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9354599007894202009

	// -----------------------------------
	// Second loop
	C = madd0(m, 422487, t[0])

	C, t[0] = madd2(m, 0, t[1], C)

	C, t[1] = madd2(m, 0, t[2], C)

	C, t[2] = madd2(m, 0, t[3], C)

	C, t[3] = madd2(m, 0, t[4], C)

	C, t[4] = madd2(m, 0, t[5], C)

	C, t[5] = madd2(m, 0, t[6], C)

	C, t[6] = madd2(m, 0, t[7], C)

	C, t[7] = madd2(m, 0, t[8], C)

	C, t[8] = madd2(m, 0, t[9], C)

	C, t[9] = madd2(m, 0, t[10], C)

	C, t[10] = madd2(m, 0, t[11], C)

	C, t[11] = madd2(m, 0, t[12], C)

	C, t[12] = madd2(m, 0, t[13], C)

	C, t[13] = madd2(m, 0, t[14], C)

	C, t[14] = madd3(m, 144115188075855872, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)

	if t[16] != 0 {
		// we need to reduce, we have a result on 17 words
		var b uint64
		z[0], b = bits.Sub64(t[0], 422487, 0)
		z[1], b = bits.Sub64(t[1], 0, b)
		z[2], b = bits.Sub64(t[2], 0, b)
		z[3], b = bits.Sub64(t[3], 0, b)
		z[4], b = bits.Sub64(t[4], 0, b)
		z[5], b = bits.Sub64(t[5], 0, b)
		z[6], b = bits.Sub64(t[6], 0, b)
		z[7], b = bits.Sub64(t[7], 0, b)
		z[8], b = bits.Sub64(t[8], 0, b)
		z[9], b = bits.Sub64(t[9], 0, b)
		z[10], b = bits.Sub64(t[10], 0, b)
		z[11], b = bits.Sub64(t[11], 0, b)
		z[12], b = bits.Sub64(t[12], 0, b)
		z[13], b = bits.Sub64(t[13], 0, b)
		z[14], b = bits.Sub64(t[14], 0, b)
		z[15], _ = bits.Sub64(t[15], 144115188075855872, b)

		return

	}

	// copy t into z
	z[0] = t[0]
	z[1] = t[1]
	z[2] = t[2]
	z[3] = t[3]
	z[4] = t[4]
	z[5] = t[5]
	z[6] = t[6]
	z[7] = t[7]
	z[8] = t[8]
	z[9] = t[9]
	z[10] = t[10]
	z[11] = t[11]
	z[12] = t[12]
	z[13] = t[13]
	z[14] = t[14]
	z[15] = t[15]

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[15] < 144115188075855872 || (z[15] == 144115188075855872 && (z[14] < 0 || (z[14] == 0 && (z[13] < 0 || (z[13] == 0 && (z[12] < 0 || (z[12] == 0 && (z[11] < 0 || (z[11] == 0 && (z[10] < 0 || (z[10] == 0 && (z[9] < 0 || (z[9] == 0 && (z[8] < 0 || (z[8] == 0 && (z[7] < 0 || (z[7] == 0 && (z[6] < 0 || (z[6] == 0 && (z[5] < 0 || (z[5] == 0 && (z[4] < 0 || (z[4] == 0 && (z[3] < 0 || (z[3] == 0 && (z[2] < 0 || (z[2] == 0 && (z[1] < 0 || (z[1] == 0 && (z[0] < 422487))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 422487, 0)
		z[1], b = bits.Sub64(z[1], 0, b)
		z[2], b = bits.Sub64(z[2], 0, b)
		z[3], b = bits.Sub64(z[3], 0, b)
		z[4], b = bits.Sub64(z[4], 0, b)
		z[5], b = bits.Sub64(z[5], 0, b)
		z[6], b = bits.Sub64(z[6], 0, b)
		z[7], b = bits.Sub64(z[7], 0, b)
		z[8], b = bits.Sub64(z[8], 0, b)
		z[9], b = bits.Sub64(z[9], 0, b)
		z[10], b = bits.Sub64(z[10], 0, b)
		z[11], b = bits.Sub64(z[11], 0, b)
		z[12], b = bits.Sub64(z[12], 0, b)
		z[13], b = bits.Sub64(z[13], 0, b)
		z[14], b = bits.Sub64(z[14], 0, b)
		z[15], _ = bits.Sub64(z[15], 144115188075855872, b)
	}
}

func _squareGeneric(z, x *Element) {

	var t [17]uint64
	var D uint64
	var m, C uint64
	// -----------------------------------
	// First loop

	C, t[0] = bits.Mul64(x[0], x[0])
	C, t[1] = madd1(x[0], x[1], C)
	C, t[2] = madd1(x[0], x[2], C)
	C, t[3] = madd1(x[0], x[3], C)
	C, t[4] = madd1(x[0], x[4], C)
	C, t[5] = madd1(x[0], x[5], C)
	C, t[6] = madd1(x[0], x[6], C)
	C, t[7] = madd1(x[0], x[7], C)
	C, t[8] = madd1(x[0], x[8], C)
	C, t[9] = madd1(x[0], x[9], C)
	C, t[10] = madd1(x[0], x[10], C)
	C, t[11] = madd1(x[0], x[11], C)
	C, t[12] = madd1(x[0], x[12], C)
	C, t[13] = madd1(x[0], x[13], C)
	C, t[14] = madd1(x[0], x[14], C)
	C, t[15] = madd1(x[0], x[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9354599007894202009

	// -----------------------------------
	// Second loop
	C = madd0(m, 422487, t[0])

	C, t[0] = madd2(m, 0, t[1], C)

	C, t[1] = madd2(m, 0, t[2], C)

	C, t[2] = madd2(m, 0, t[3], C)

	C, t[3] = madd2(m, 0, t[4], C)

	C, t[4] = madd2(m, 0, t[5], C)

	C, t[5] = madd2(m, 0, t[6], C)

	C, t[6] = madd2(m, 0, t[7], C)

	C, t[7] = madd2(m, 0, t[8], C)

	C, t[8] = madd2(m, 0, t[9], C)

	C, t[9] = madd2(m, 0, t[10], C)

	C, t[10] = madd2(m, 0, t[11], C)

	C, t[11] = madd2(m, 0, t[12], C)

	C, t[12] = madd2(m, 0, t[13], C)

	C, t[13] = madd2(m, 0, t[14], C)

	C, t[14] = madd3(m, 144115188075855872, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[1], x[0], t[0])
	C, t[1] = madd2(x[1], x[1], t[1], C)
	C, t[2] = madd2(x[1], x[2], t[2], C)
	C, t[3] = madd2(x[1], x[3], t[3], C)
	C, t[4] = madd2(x[1], x[4], t[4], C)
	C, t[5] = madd2(x[1], x[5], t[5], C)
	C, t[6] = madd2(x[1], x[6], t[6], C)
	C, t[7] = madd2(x[1], x[7], t[7], C)
	C, t[8] = madd2(x[1], x[8], t[8], C)
	C, t[9] = madd2(x[1], x[9], t[9], C)
	C, t[10] = madd2(x[1], x[10], t[10], C)
	C, t[11] = madd2(x[1], x[11], t[11], C)
	C, t[12] = madd2(x[1], x[12], t[12], C)
	C, t[13] = madd2(x[1], x[13], t[13], C)
	C, t[14] = madd2(x[1], x[14], t[14], C)
	C, t[15] = madd2(x[1], x[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9354599007894202009

	// -----------------------------------
	// Second loop
	C = madd0(m, 422487, t[0])

	C, t[0] = madd2(m, 0, t[1], C)

	C, t[1] = madd2(m, 0, t[2], C)

	C, t[2] = madd2(m, 0, t[3], C)

	C, t[3] = madd2(m, 0, t[4], C)

	C, t[4] = madd2(m, 0, t[5], C)

	C, t[5] = madd2(m, 0, t[6], C)

	C, t[6] = madd2(m, 0, t[7], C)

	C, t[7] = madd2(m, 0, t[8], C)

	C, t[8] = madd2(m, 0, t[9], C)

	C, t[9] = madd2(m, 0, t[10], C)

	C, t[10] = madd2(m, 0, t[11], C)

	C, t[11] = madd2(m, 0, t[12], C)

	C, t[12] = madd2(m, 0, t[13], C)

	C, t[13] = madd2(m, 0, t[14], C)

	C, t[14] = madd3(m, 144115188075855872, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[2], x[0], t[0])
	C, t[1] = madd2(x[2], x[1], t[1], C)
	C, t[2] = madd2(x[2], x[2], t[2], C)
	C, t[3] = madd2(x[2], x[3], t[3], C)
	C, t[4] = madd2(x[2], x[4], t[4], C)
	C, t[5] = madd2(x[2], x[5], t[5], C)
	C, t[6] = madd2(x[2], x[6], t[6], C)
	C, t[7] = madd2(x[2], x[7], t[7], C)
	C, t[8] = madd2(x[2], x[8], t[8], C)
	C, t[9] = madd2(x[2], x[9], t[9], C)
	C, t[10] = madd2(x[2], x[10], t[10], C)
	C, t[11] = madd2(x[2], x[11], t[11], C)
	C, t[12] = madd2(x[2], x[12], t[12], C)
	C, t[13] = madd2(x[2], x[13], t[13], C)
	C, t[14] = madd2(x[2], x[14], t[14], C)
	C, t[15] = madd2(x[2], x[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9354599007894202009

	// -----------------------------------
	// Second loop
	C = madd0(m, 422487, t[0])

	C, t[0] = madd2(m, 0, t[1], C)

	C, t[1] = madd2(m, 0, t[2], C)

	C, t[2] = madd2(m, 0, t[3], C)

	C, t[3] = madd2(m, 0, t[4], C)

	C, t[4] = madd2(m, 0, t[5], C)

	C, t[5] = madd2(m, 0, t[6], C)

	C, t[6] = madd2(m, 0, t[7], C)

	C, t[7] = madd2(m, 0, t[8], C)

	C, t[8] = madd2(m, 0, t[9], C)

	C, t[9] = madd2(m, 0, t[10], C)

	C, t[10] = madd2(m, 0, t[11], C)

	C, t[11] = madd2(m, 0, t[12], C)

	C, t[12] = madd2(m, 0, t[13], C)

	C, t[13] = madd2(m, 0, t[14], C)

	C, t[14] = madd3(m, 144115188075855872, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[3], x[0], t[0])
	C, t[1] = madd2(x[3], x[1], t[1], C)
	C, t[2] = madd2(x[3], x[2], t[2], C)
	C, t[3] = madd2(x[3], x[3], t[3], C)
	C, t[4] = madd2(x[3], x[4], t[4], C)
	C, t[5] = madd2(x[3], x[5], t[5], C)
	C, t[6] = madd2(x[3], x[6], t[6], C)
	C, t[7] = madd2(x[3], x[7], t[7], C)
	C, t[8] = madd2(x[3], x[8], t[8], C)
	C, t[9] = madd2(x[3], x[9], t[9], C)
	C, t[10] = madd2(x[3], x[10], t[10], C)
	C, t[11] = madd2(x[3], x[11], t[11], C)
	C, t[12] = madd2(x[3], x[12], t[12], C)
	C, t[13] = madd2(x[3], x[13], t[13], C)
	C, t[14] = madd2(x[3], x[14], t[14], C)
	C, t[15] = madd2(x[3], x[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9354599007894202009

	// -----------------------------------
	// Second loop
	C = madd0(m, 422487, t[0])

	C, t[0] = madd2(m, 0, t[1], C)

	C, t[1] = madd2(m, 0, t[2], C)

	C, t[2] = madd2(m, 0, t[3], C)

	C, t[3] = madd2(m, 0, t[4], C)

	C, t[4] = madd2(m, 0, t[5], C)

	C, t[5] = madd2(m, 0, t[6], C)

	C, t[6] = madd2(m, 0, t[7], C)

	C, t[7] = madd2(m, 0, t[8], C)

	C, t[8] = madd2(m, 0, t[9], C)

	C, t[9] = madd2(m, 0, t[10], C)

	C, t[10] = madd2(m, 0, t[11], C)

	C, t[11] = madd2(m, 0, t[12], C)

	C, t[12] = madd2(m, 0, t[13], C)

	C, t[13] = madd2(m, 0, t[14], C)

	C, t[14] = madd3(m, 144115188075855872, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[4], x[0], t[0])
	C, t[1] = madd2(x[4], x[1], t[1], C)
	C, t[2] = madd2(x[4], x[2], t[2], C)
	C, t[3] = madd2(x[4], x[3], t[3], C)
	C, t[4] = madd2(x[4], x[4], t[4], C)
	C, t[5] = madd2(x[4], x[5], t[5], C)
	C, t[6] = madd2(x[4], x[6], t[6], C)
	C, t[7] = madd2(x[4], x[7], t[7], C)
	C, t[8] = madd2(x[4], x[8], t[8], C)
	C, t[9] = madd2(x[4], x[9], t[9], C)
	C, t[10] = madd2(x[4], x[10], t[10], C)
	C, t[11] = madd2(x[4], x[11], t[11], C)
	C, t[12] = madd2(x[4], x[12], t[12], C)
	C, t[13] = madd2(x[4], x[13], t[13], C)
	C, t[14] = madd2(x[4], x[14], t[14], C)
	C, t[15] = madd2(x[4], x[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9354599007894202009

	// -----------------------------------
	// Second loop
	C = madd0(m, 422487, t[0])

	C, t[0] = madd2(m, 0, t[1], C)

	C, t[1] = madd2(m, 0, t[2], C)

	C, t[2] = madd2(m, 0, t[3], C)

	C, t[3] = madd2(m, 0, t[4], C)

	C, t[4] = madd2(m, 0, t[5], C)

	C, t[5] = madd2(m, 0, t[6], C)

	C, t[6] = madd2(m, 0, t[7], C)

	C, t[7] = madd2(m, 0, t[8], C)

	C, t[8] = madd2(m, 0, t[9], C)

	C, t[9] = madd2(m, 0, t[10], C)

	C, t[10] = madd2(m, 0, t[11], C)

	C, t[11] = madd2(m, 0, t[12], C)

	C, t[12] = madd2(m, 0, t[13], C)

	C, t[13] = madd2(m, 0, t[14], C)

	C, t[14] = madd3(m, 144115188075855872, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[5], x[0], t[0])
	C, t[1] = madd2(x[5], x[1], t[1], C)
	C, t[2] = madd2(x[5], x[2], t[2], C)
	C, t[3] = madd2(x[5], x[3], t[3], C)
	C, t[4] = madd2(x[5], x[4], t[4], C)
	C, t[5] = madd2(x[5], x[5], t[5], C)
	C, t[6] = madd2(x[5], x[6], t[6], C)
	C, t[7] = madd2(x[5], x[7], t[7], C)
	C, t[8] = madd2(x[5], x[8], t[8], C)
	C, t[9] = madd2(x[5], x[9], t[9], C)
	C, t[10] = madd2(x[5], x[10], t[10], C)
	C, t[11] = madd2(x[5], x[11], t[11], C)
	C, t[12] = madd2(x[5], x[12], t[12], C)
	C, t[13] = madd2(x[5], x[13], t[13], C)
	C, t[14] = madd2(x[5], x[14], t[14], C)
	C, t[15] = madd2(x[5], x[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9354599007894202009

	// -----------------------------------
	// Second loop
	C = madd0(m, 422487, t[0])

	C, t[0] = madd2(m, 0, t[1], C)

	C, t[1] = madd2(m, 0, t[2], C)

	C, t[2] = madd2(m, 0, t[3], C)

	C, t[3] = madd2(m, 0, t[4], C)

	C, t[4] = madd2(m, 0, t[5], C)

	C, t[5] = madd2(m, 0, t[6], C)

	C, t[6] = madd2(m, 0, t[7], C)

	C, t[7] = madd2(m, 0, t[8], C)

	C, t[8] = madd2(m, 0, t[9], C)

	C, t[9] = madd2(m, 0, t[10], C)

	C, t[10] = madd2(m, 0, t[11], C)

	C, t[11] = madd2(m, 0, t[12], C)

	C, t[12] = madd2(m, 0, t[13], C)

	C, t[13] = madd2(m, 0, t[14], C)

	C, t[14] = madd3(m, 144115188075855872, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[6], x[0], t[0])
	C, t[1] = madd2(x[6], x[1], t[1], C)
	C, t[2] = madd2(x[6], x[2], t[2], C)
	C, t[3] = madd2(x[6], x[3], t[3], C)
	C, t[4] = madd2(x[6], x[4], t[4], C)
	C, t[5] = madd2(x[6], x[5], t[5], C)
	C, t[6] = madd2(x[6], x[6], t[6], C)
	C, t[7] = madd2(x[6], x[7], t[7], C)
	C, t[8] = madd2(x[6], x[8], t[8], C)
	C, t[9] = madd2(x[6], x[9], t[9], C)
	C, t[10] = madd2(x[6], x[10], t[10], C)
	C, t[11] = madd2(x[6], x[11], t[11], C)
	C, t[12] = madd2(x[6], x[12], t[12], C)
	C, t[13] = madd2(x[6], x[13], t[13], C)
	C, t[14] = madd2(x[6], x[14], t[14], C)
	C, t[15] = madd2(x[6], x[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9354599007894202009

	// -----------------------------------
	// Second loop
	C = madd0(m, 422487, t[0])

	C, t[0] = madd2(m, 0, t[1], C)

	C, t[1] = madd2(m, 0, t[2], C)

	C, t[2] = madd2(m, 0, t[3], C)

	C, t[3] = madd2(m, 0, t[4], C)

	C, t[4] = madd2(m, 0, t[5], C)

	C, t[5] = madd2(m, 0, t[6], C)

	C, t[6] = madd2(m, 0, t[7], C)

	C, t[7] = madd2(m, 0, t[8], C)

	C, t[8] = madd2(m, 0, t[9], C)

	C, t[9] = madd2(m, 0, t[10], C)

	C, t[10] = madd2(m, 0, t[11], C)

	C, t[11] = madd2(m, 0, t[12], C)

	C, t[12] = madd2(m, 0, t[13], C)

	C, t[13] = madd2(m, 0, t[14], C)

	C, t[14] = madd3(m, 144115188075855872, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[7], x[0], t[0])
	C, t[1] = madd2(x[7], x[1], t[1], C)
	C, t[2] = madd2(x[7], x[2], t[2], C)
	C, t[3] = madd2(x[7], x[3], t[3], C)
	C, t[4] = madd2(x[7], x[4], t[4], C)
	C, t[5] = madd2(x[7], x[5], t[5], C)
	C, t[6] = madd2(x[7], x[6], t[6], C)
	C, t[7] = madd2(x[7], x[7], t[7], C)
	C, t[8] = madd2(x[7], x[8], t[8], C)
	C, t[9] = madd2(x[7], x[9], t[9], C)
	C, t[10] = madd2(x[7], x[10], t[10], C)
	C, t[11] = madd2(x[7], x[11], t[11], C)
	C, t[12] = madd2(x[7], x[12], t[12], C)
	C, t[13] = madd2(x[7], x[13], t[13], C)
	C, t[14] = madd2(x[7], x[14], t[14], C)
	C, t[15] = madd2(x[7], x[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9354599007894202009

	// -----------------------------------
	// Second loop
	C = madd0(m, 422487, t[0])

	C, t[0] = madd2(m, 0, t[1], C)

	C, t[1] = madd2(m, 0, t[2], C)

	C, t[2] = madd2(m, 0, t[3], C)

	C, t[3] = madd2(m, 0, t[4], C)

	C, t[4] = madd2(m, 0, t[5], C)

	C, t[5] = madd2(m, 0, t[6], C)

	C, t[6] = madd2(m, 0, t[7], C)

	C, t[7] = madd2(m, 0, t[8], C)

	C, t[8] = madd2(m, 0, t[9], C)

	C, t[9] = madd2(m, 0, t[10], C)

	C, t[10] = madd2(m, 0, t[11], C)

	C, t[11] = madd2(m, 0, t[12], C)

	C, t[12] = madd2(m, 0, t[13], C)

	C, t[13] = madd2(m, 0, t[14], C)

	C, t[14] = madd3(m, 144115188075855872, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[8], x[0], t[0])
	C, t[1] = madd2(x[8], x[1], t[1], C)
	C, t[2] = madd2(x[8], x[2], t[2], C)
	C, t[3] = madd2(x[8], x[3], t[3], C)
	C, t[4] = madd2(x[8], x[4], t[4], C)
	C, t[5] = madd2(x[8], x[5], t[5], C)
	C, t[6] = madd2(x[8], x[6], t[6], C)
	C, t[7] = madd2(x[8], x[7], t[7], C)
	C, t[8] = madd2(x[8], x[8], t[8], C)
	C, t[9] = madd2(x[8], x[9], t[9], C)
	C, t[10] = madd2(x[8], x[10], t[10], C)
	C, t[11] = madd2(x[8], x[11], t[11], C)
	C, t[12] = madd2(x[8], x[12], t[12], C)
	C, t[13] = madd2(x[8], x[13], t[13], C)
	C, t[14] = madd2(x[8], x[14], t[14], C)
	C, t[15] = madd2(x[8], x[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9354599007894202009

	// -----------------------------------
	// Second loop
	C = madd0(m, 422487, t[0])

	C, t[0] = madd2(m, 0, t[1], C)

	C, t[1] = madd2(m, 0, t[2], C)

	C, t[2] = madd2(m, 0, t[3], C)

	C, t[3] = madd2(m, 0, t[4], C)

	C, t[4] = madd2(m, 0, t[5], C)

	C, t[5] = madd2(m, 0, t[6], C)

	C, t[6] = madd2(m, 0, t[7], C)

	C, t[7] = madd2(m, 0, t[8], C)

	C, t[8] = madd2(m, 0, t[9], C)

	C, t[9] = madd2(m, 0, t[10], C)

	C, t[10] = madd2(m, 0, t[11], C)

	C, t[11] = madd2(m, 0, t[12], C)

	C, t[12] = madd2(m, 0, t[13], C)

	C, t[13] = madd2(m, 0, t[14], C)

	C, t[14] = madd3(m, 144115188075855872, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[9], x[0], t[0])
	C, t[1] = madd2(x[9], x[1], t[1], C)
	C, t[2] = madd2(x[9], x[2], t[2], C)
	C, t[3] = madd2(x[9], x[3], t[3], C)
	C, t[4] = madd2(x[9], x[4], t[4], C)
	C, t[5] = madd2(x[9], x[5], t[5], C)
	C, t[6] = madd2(x[9], x[6], t[6], C)
	C, t[7] = madd2(x[9], x[7], t[7], C)
	C, t[8] = madd2(x[9], x[8], t[8], C)
	C, t[9] = madd2(x[9], x[9], t[9], C)
	C, t[10] = madd2(x[9], x[10], t[10], C)
	C, t[11] = madd2(x[9], x[11], t[11], C)
	C, t[12] = madd2(x[9], x[12], t[12], C)
	C, t[13] = madd2(x[9], x[13], t[13], C)
	C, t[14] = madd2(x[9], x[14], t[14], C)
	C, t[15] = madd2(x[9], x[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9354599007894202009

	// -----------------------------------
	// Second loop
	C = madd0(m, 422487, t[0])

	C, t[0] = madd2(m, 0, t[1], C)

	C, t[1] = madd2(m, 0, t[2], C)

	C, t[2] = madd2(m, 0, t[3], C)

	C, t[3] = madd2(m, 0, t[4], C)

	C, t[4] = madd2(m, 0, t[5], C)

	C, t[5] = madd2(m, 0, t[6], C)

	C, t[6] = madd2(m, 0, t[7], C)

	C, t[7] = madd2(m, 0, t[8], C)

	C, t[8] = madd2(m, 0, t[9], C)

	C, t[9] = madd2(m, 0, t[10], C)

	C, t[10] = madd2(m, 0, t[11], C)

	C, t[11] = madd2(m, 0, t[12], C)

	C, t[12] = madd2(m, 0, t[13], C)

	C, t[13] = madd2(m, 0, t[14], C)

	C, t[14] = madd3(m, 144115188075855872, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[10], x[0], t[0])
	C, t[1] = madd2(x[10], x[1], t[1], C)
	C, t[2] = madd2(x[10], x[2], t[2], C)
	C, t[3] = madd2(x[10], x[3], t[3], C)
	C, t[4] = madd2(x[10], x[4], t[4], C)
	C, t[5] = madd2(x[10], x[5], t[5], C)
	C, t[6] = madd2(x[10], x[6], t[6], C)
	C, t[7] = madd2(x[10], x[7], t[7], C)
	C, t[8] = madd2(x[10], x[8], t[8], C)
	C, t[9] = madd2(x[10], x[9], t[9], C)
	C, t[10] = madd2(x[10], x[10], t[10], C)
	C, t[11] = madd2(x[10], x[11], t[11], C)
	C, t[12] = madd2(x[10], x[12], t[12], C)
	C, t[13] = madd2(x[10], x[13], t[13], C)
	C, t[14] = madd2(x[10], x[14], t[14], C)
	C, t[15] = madd2(x[10], x[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9354599007894202009

	// -----------------------------------
	// Second loop
	C = madd0(m, 422487, t[0])

	C, t[0] = madd2(m, 0, t[1], C)

	C, t[1] = madd2(m, 0, t[2], C)

	C, t[2] = madd2(m, 0, t[3], C)

	C, t[3] = madd2(m, 0, t[4], C)

	C, t[4] = madd2(m, 0, t[5], C)

	C, t[5] = madd2(m, 0, t[6], C)

	C, t[6] = madd2(m, 0, t[7], C)

	C, t[7] = madd2(m, 0, t[8], C)

	C, t[8] = madd2(m, 0, t[9], C)

	C, t[9] = madd2(m, 0, t[10], C)

	C, t[10] = madd2(m, 0, t[11], C)

	C, t[11] = madd2(m, 0, t[12], C)

	C, t[12] = madd2(m, 0, t[13], C)

	C, t[13] = madd2(m, 0, t[14], C)

	C, t[14] = madd3(m, 144115188075855872, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[11], x[0], t[0])
	C, t[1] = madd2(x[11], x[1], t[1], C)
	C, t[2] = madd2(x[11], x[2], t[2], C)
	C, t[3] = madd2(x[11], x[3], t[3], C)
	C, t[4] = madd2(x[11], x[4], t[4], C)
	C, t[5] = madd2(x[11], x[5], t[5], C)
	C, t[6] = madd2(x[11], x[6], t[6], C)
	C, t[7] = madd2(x[11], x[7], t[7], C)
	C, t[8] = madd2(x[11], x[8], t[8], C)
	C, t[9] = madd2(x[11], x[9], t[9], C)
	C, t[10] = madd2(x[11], x[10], t[10], C)
	C, t[11] = madd2(x[11], x[11], t[11], C)
	C, t[12] = madd2(x[11], x[12], t[12], C)
	C, t[13] = madd2(x[11], x[13], t[13], C)
	C, t[14] = madd2(x[11], x[14], t[14], C)
	C, t[15] = madd2(x[11], x[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9354599007894202009

	// -----------------------------------
	// Second loop
	C = madd0(m, 422487, t[0])

	C, t[0] = madd2(m, 0, t[1], C)

	C, t[1] = madd2(m, 0, t[2], C)

	C, t[2] = madd2(m, 0, t[3], C)

	C, t[3] = madd2(m, 0, t[4], C)

	C, t[4] = madd2(m, 0, t[5], C)

	C, t[5] = madd2(m, 0, t[6], C)

	C, t[6] = madd2(m, 0, t[7], C)

	C, t[7] = madd2(m, 0, t[8], C)

	C, t[8] = madd2(m, 0, t[9], C)

	C, t[9] = madd2(m, 0, t[10], C)

	C, t[10] = madd2(m, 0, t[11], C)

	C, t[11] = madd2(m, 0, t[12], C)

	C, t[12] = madd2(m, 0, t[13], C)

	C, t[13] = madd2(m, 0, t[14], C)

	C, t[14] = madd3(m, 144115188075855872, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[12], x[0], t[0])
	C, t[1] = madd2(x[12], x[1], t[1], C)
	C, t[2] = madd2(x[12], x[2], t[2], C)
	C, t[3] = madd2(x[12], x[3], t[3], C)
	C, t[4] = madd2(x[12], x[4], t[4], C)
	C, t[5] = madd2(x[12], x[5], t[5], C)
	C, t[6] = madd2(x[12], x[6], t[6], C)
	C, t[7] = madd2(x[12], x[7], t[7], C)
	C, t[8] = madd2(x[12], x[8], t[8], C)
	C, t[9] = madd2(x[12], x[9], t[9], C)
	C, t[10] = madd2(x[12], x[10], t[10], C)
	C, t[11] = madd2(x[12], x[11], t[11], C)
	C, t[12] = madd2(x[12], x[12], t[12], C)
	C, t[13] = madd2(x[12], x[13], t[13], C)
	C, t[14] = madd2(x[12], x[14], t[14], C)
	C, t[15] = madd2(x[12], x[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9354599007894202009

	// -----------------------------------
	// Second loop
	C = madd0(m, 422487, t[0])

	C, t[0] = madd2(m, 0, t[1], C)

	C, t[1] = madd2(m, 0, t[2], C)

	C, t[2] = madd2(m, 0, t[3], C)

	C, t[3] = madd2(m, 0, t[4], C)

	C, t[4] = madd2(m, 0, t[5], C)

	C, t[5] = madd2(m, 0, t[6], C)

	C, t[6] = madd2(m, 0, t[7], C)

	C, t[7] = madd2(m, 0, t[8], C)

	C, t[8] = madd2(m, 0, t[9], C)

	C, t[9] = madd2(m, 0, t[10], C)

	C, t[10] = madd2(m, 0, t[11], C)

	C, t[11] = madd2(m, 0, t[12], C)

	C, t[12] = madd2(m, 0, t[13], C)

	C, t[13] = madd2(m, 0, t[14], C)

	C, t[14] = madd3(m, 144115188075855872, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[13], x[0], t[0])
	C, t[1] = madd2(x[13], x[1], t[1], C)
	C, t[2] = madd2(x[13], x[2], t[2], C)
	C, t[3] = madd2(x[13], x[3], t[3], C)
	C, t[4] = madd2(x[13], x[4], t[4], C)
	C, t[5] = madd2(x[13], x[5], t[5], C)
	C, t[6] = madd2(x[13], x[6], t[6], C)
	C, t[7] = madd2(x[13], x[7], t[7], C)
	C, t[8] = madd2(x[13], x[8], t[8], C)
	C, t[9] = madd2(x[13], x[9], t[9], C)
	C, t[10] = madd2(x[13], x[10], t[10], C)
	C, t[11] = madd2(x[13], x[11], t[11], C)
	C, t[12] = madd2(x[13], x[12], t[12], C)
	C, t[13] = madd2(x[13], x[13], t[13], C)
	C, t[14] = madd2(x[13], x[14], t[14], C)
	C, t[15] = madd2(x[13], x[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9354599007894202009

	// -----------------------------------
	// Second loop
	C = madd0(m, 422487, t[0])

	C, t[0] = madd2(m, 0, t[1], C)

	C, t[1] = madd2(m, 0, t[2], C)

	C, t[2] = madd2(m, 0, t[3], C)

	C, t[3] = madd2(m, 0, t[4], C)

	C, t[4] = madd2(m, 0, t[5], C)

	C, t[5] = madd2(m, 0, t[6], C)

	C, t[6] = madd2(m, 0, t[7], C)

	C, t[7] = madd2(m, 0, t[8], C)

	C, t[8] = madd2(m, 0, t[9], C)

	C, t[9] = madd2(m, 0, t[10], C)

	C, t[10] = madd2(m, 0, t[11], C)

	C, t[11] = madd2(m, 0, t[12], C)

	C, t[12] = madd2(m, 0, t[13], C)

	C, t[13] = madd2(m, 0, t[14], C)

	C, t[14] = madd3(m, 144115188075855872, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[14], x[0], t[0])
	C, t[1] = madd2(x[14], x[1], t[1], C)
	C, t[2] = madd2(x[14], x[2], t[2], C)
	C, t[3] = madd2(x[14], x[3], t[3], C)
	C, t[4] = madd2(x[14], x[4], t[4], C)
	C, t[5] = madd2(x[14], x[5], t[5], C)
	C, t[6] = madd2(x[14], x[6], t[6], C)
	C, t[7] = madd2(x[14], x[7], t[7], C)
	C, t[8] = madd2(x[14], x[8], t[8], C)
	C, t[9] = madd2(x[14], x[9], t[9], C)
	C, t[10] = madd2(x[14], x[10], t[10], C)
	C, t[11] = madd2(x[14], x[11], t[11], C)
	C, t[12] = madd2(x[14], x[12], t[12], C)
	C, t[13] = madd2(x[14], x[13], t[13], C)
	C, t[14] = madd2(x[14], x[14], t[14], C)
	C, t[15] = madd2(x[14], x[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9354599007894202009

	// -----------------------------------
	// Second loop
	C = madd0(m, 422487, t[0])

	C, t[0] = madd2(m, 0, t[1], C)

	C, t[1] = madd2(m, 0, t[2], C)

	C, t[2] = madd2(m, 0, t[3], C)

	C, t[3] = madd2(m, 0, t[4], C)

	C, t[4] = madd2(m, 0, t[5], C)

	C, t[5] = madd2(m, 0, t[6], C)

	C, t[6] = madd2(m, 0, t[7], C)

	C, t[7] = madd2(m, 0, t[8], C)

	C, t[8] = madd2(m, 0, t[9], C)

	C, t[9] = madd2(m, 0, t[10], C)

	C, t[10] = madd2(m, 0, t[11], C)

	C, t[11] = madd2(m, 0, t[12], C)

	C, t[12] = madd2(m, 0, t[13], C)

	C, t[13] = madd2(m, 0, t[14], C)

	C, t[14] = madd3(m, 144115188075855872, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(x[15], x[0], t[0])
	C, t[1] = madd2(x[15], x[1], t[1], C)
	C, t[2] = madd2(x[15], x[2], t[2], C)
	C, t[3] = madd2(x[15], x[3], t[3], C)
	C, t[4] = madd2(x[15], x[4], t[4], C)
	C, t[5] = madd2(x[15], x[5], t[5], C)
	C, t[6] = madd2(x[15], x[6], t[6], C)
	C, t[7] = madd2(x[15], x[7], t[7], C)
	C, t[8] = madd2(x[15], x[8], t[8], C)
	C, t[9] = madd2(x[15], x[9], t[9], C)
	C, t[10] = madd2(x[15], x[10], t[10], C)
	C, t[11] = madd2(x[15], x[11], t[11], C)
	C, t[12] = madd2(x[15], x[12], t[12], C)
	C, t[13] = madd2(x[15], x[13], t[13], C)
	C, t[14] = madd2(x[15], x[14], t[14], C)
	C, t[15] = madd2(x[15], x[15], t[15], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 9354599007894202009

	// -----------------------------------
	// Second loop
	C = madd0(m, 422487, t[0])

	C, t[0] = madd2(m, 0, t[1], C)

	C, t[1] = madd2(m, 0, t[2], C)

	C, t[2] = madd2(m, 0, t[3], C)

	C, t[3] = madd2(m, 0, t[4], C)

	C, t[4] = madd2(m, 0, t[5], C)

	C, t[5] = madd2(m, 0, t[6], C)

	C, t[6] = madd2(m, 0, t[7], C)

	C, t[7] = madd2(m, 0, t[8], C)

	C, t[8] = madd2(m, 0, t[9], C)

	C, t[9] = madd2(m, 0, t[10], C)

	C, t[10] = madd2(m, 0, t[11], C)

	C, t[11] = madd2(m, 0, t[12], C)

	C, t[12] = madd2(m, 0, t[13], C)

	C, t[13] = madd2(m, 0, t[14], C)

	C, t[14] = madd3(m, 144115188075855872, t[15], C, t[16])

	t[15], t[16] = bits.Add64(D, C, 0)

	if t[16] != 0 {
		// we need to reduce, we have a result on 17 words
		var b uint64
		z[0], b = bits.Sub64(t[0], 422487, 0)
		z[1], b = bits.Sub64(t[1], 0, b)
		z[2], b = bits.Sub64(t[2], 0, b)
		z[3], b = bits.Sub64(t[3], 0, b)
		z[4], b = bits.Sub64(t[4], 0, b)
		z[5], b = bits.Sub64(t[5], 0, b)
		z[6], b = bits.Sub64(t[6], 0, b)
		z[7], b = bits.Sub64(t[7], 0, b)
		z[8], b = bits.Sub64(t[8], 0, b)
		z[9], b = bits.Sub64(t[9], 0, b)
		z[10], b = bits.Sub64(t[10], 0, b)
		z[11], b = bits.Sub64(t[11], 0, b)
		z[12], b = bits.Sub64(t[12], 0, b)
		z[13], b = bits.Sub64(t[13], 0, b)
		z[14], b = bits.Sub64(t[14], 0, b)
		z[15], _ = bits.Sub64(t[15], 144115188075855872, b)

		return

	}

	// copy t into z
	z[0] = t[0]
	z[1] = t[1]
	z[2] = t[2]
	z[3] = t[3]
	z[4] = t[4]
	z[5] = t[5]
	z[6] = t[6]
	z[7] = t[7]
	z[8] = t[8]
	z[9] = t[9]
	z[10] = t[10]
	z[11] = t[11]
	z[12] = t[12]
	z[13] = t[13]
	z[14] = t[14]
	z[15] = t[15]

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[15] < 144115188075855872 || (z[15] == 144115188075855872 && (z[14] < 0 || (z[14] == 0 && (z[13] < 0 || (z[13] == 0 && (z[12] < 0 || (z[12] == 0 && (z[11] < 0 || (z[11] == 0 && (z[10] < 0 || (z[10] == 0 && (z[9] < 0 || (z[9] == 0 && (z[8] < 0 || (z[8] == 0 && (z[7] < 0 || (z[7] == 0 && (z[6] < 0 || (z[6] == 0 && (z[5] < 0 || (z[5] == 0 && (z[4] < 0 || (z[4] == 0 && (z[3] < 0 || (z[3] == 0 && (z[2] < 0 || (z[2] == 0 && (z[1] < 0 || (z[1] == 0 && (z[0] < 422487))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 422487, 0)
		z[1], b = bits.Sub64(z[1], 0, b)
		z[2], b = bits.Sub64(z[2], 0, b)
		z[3], b = bits.Sub64(z[3], 0, b)
		z[4], b = bits.Sub64(z[4], 0, b)
		z[5], b = bits.Sub64(z[5], 0, b)
		z[6], b = bits.Sub64(z[6], 0, b)
		z[7], b = bits.Sub64(z[7], 0, b)
		z[8], b = bits.Sub64(z[8], 0, b)
		z[9], b = bits.Sub64(z[9], 0, b)
		z[10], b = bits.Sub64(z[10], 0, b)
		z[11], b = bits.Sub64(z[11], 0, b)
		z[12], b = bits.Sub64(z[12], 0, b)
		z[13], b = bits.Sub64(z[13], 0, b)
		z[14], b = bits.Sub64(z[14], 0, b)
		z[15], _ = bits.Sub64(z[15], 144115188075855872, b)
	}
}

func _fromMontGeneric(z *Element) {
	// the following lines implement z = z * 1
	// with a modified CIOS montgomery multiplication
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 9354599007894202009
		C := madd0(m, 422487, z[0])
		C, z[0] = madd2(m, 0, z[1], C)
		C, z[1] = madd2(m, 0, z[2], C)
		C, z[2] = madd2(m, 0, z[3], C)
		C, z[3] = madd2(m, 0, z[4], C)
		C, z[4] = madd2(m, 0, z[5], C)
		C, z[5] = madd2(m, 0, z[6], C)
		C, z[6] = madd2(m, 0, z[7], C)
		C, z[7] = madd2(m, 0, z[8], C)
		C, z[8] = madd2(m, 0, z[9], C)
		C, z[9] = madd2(m, 0, z[10], C)
		C, z[10] = madd2(m, 0, z[11], C)
		C, z[11] = madd2(m, 0, z[12], C)
		C, z[12] = madd2(m, 0, z[13], C)
		C, z[13] = madd2(m, 0, z[14], C)
		C, z[14] = madd2(m, 144115188075855872, z[15], C)
		z[15] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 9354599007894202009
		C := madd0(m, 422487, z[0])
		C, z[0] = madd2(m, 0, z[1], C)
		C, z[1] = madd2(m, 0, z[2], C)
		C, z[2] = madd2(m, 0, z[3], C)
		C, z[3] = madd2(m, 0, z[4], C)
		C, z[4] = madd2(m, 0, z[5], C)
		C, z[5] = madd2(m, 0, z[6], C)
		C, z[6] = madd2(m, 0, z[7], C)
		C, z[7] = madd2(m, 0, z[8], C)
		C, z[8] = madd2(m, 0, z[9], C)
		C, z[9] = madd2(m, 0, z[10], C)
		C, z[10] = madd2(m, 0, z[11], C)
		C, z[11] = madd2(m, 0, z[12], C)
		C, z[12] = madd2(m, 0, z[13], C)
		C, z[13] = madd2(m, 0, z[14], C)
		C, z[14] = madd2(m, 144115188075855872, z[15], C)
		z[15] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 9354599007894202009
		C := madd0(m, 422487, z[0])
		C, z[0] = madd2(m, 0, z[1], C)
		C, z[1] = madd2(m, 0, z[2], C)
		C, z[2] = madd2(m, 0, z[3], C)
		C, z[3] = madd2(m, 0, z[4], C)
		C, z[4] = madd2(m, 0, z[5], C)
		C, z[5] = madd2(m, 0, z[6], C)
		C, z[6] = madd2(m, 0, z[7], C)
		C, z[7] = madd2(m, 0, z[8], C)
		C, z[8] = madd2(m, 0, z[9], C)
		C, z[9] = madd2(m, 0, z[10], C)
		C, z[10] = madd2(m, 0, z[11], C)
		C, z[11] = madd2(m, 0, z[12], C)
		C, z[12] = madd2(m, 0, z[13], C)
		C, z[13] = madd2(m, 0, z[14], C)
		C, z[14] = madd2(m, 144115188075855872, z[15], C)
		z[15] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 9354599007894202009
		C := madd0(m, 422487, z[0])
		C, z[0] = madd2(m, 0, z[1], C)
		C, z[1] = madd2(m, 0, z[2], C)
		C, z[2] = madd2(m, 0, z[3], C)
		C, z[3] = madd2(m, 0, z[4], C)
		C, z[4] = madd2(m, 0, z[5], C)
		C, z[5] = madd2(m, 0, z[6], C)
		C, z[6] = madd2(m, 0, z[7], C)
		C, z[7] = madd2(m, 0, z[8], C)
		C, z[8] = madd2(m, 0, z[9], C)
		C, z[9] = madd2(m, 0, z[10], C)
		C, z[10] = madd2(m, 0, z[11], C)
		C, z[11] = madd2(m, 0, z[12], C)
		C, z[12] = madd2(m, 0, z[13], C)
		C, z[13] = madd2(m, 0, z[14], C)
		C, z[14] = madd2(m, 144115188075855872, z[15], C)
		z[15] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 9354599007894202009
		C := madd0(m, 422487, z[0])
		C, z[0] = madd2(m, 0, z[1], C)
		C, z[1] = madd2(m, 0, z[2], C)
		C, z[2] = madd2(m, 0, z[3], C)
		C, z[3] = madd2(m, 0, z[4], C)
		C, z[4] = madd2(m, 0, z[5], C)
		C, z[5] = madd2(m, 0, z[6], C)
		C, z[6] = madd2(m, 0, z[7], C)
		C, z[7] = madd2(m, 0, z[8], C)
		C, z[8] = madd2(m, 0, z[9], C)
		C, z[9] = madd2(m, 0, z[10], C)
		C, z[10] = madd2(m, 0, z[11], C)
		C, z[11] = madd2(m, 0, z[12], C)
		C, z[12] = madd2(m, 0, z[13], C)
		C, z[13] = madd2(m, 0, z[14], C)
		C, z[14] = madd2(m, 144115188075855872, z[15], C)
		z[15] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 9354599007894202009
		C := madd0(m, 422487, z[0])
		C, z[0] = madd2(m, 0, z[1], C)
		C, z[1] = madd2(m, 0, z[2], C)
		C, z[2] = madd2(m, 0, z[3], C)
		C, z[3] = madd2(m, 0, z[4], C)
		C, z[4] = madd2(m, 0, z[5], C)
		C, z[5] = madd2(m, 0, z[6], C)
		C, z[6] = madd2(m, 0, z[7], C)
		C, z[7] = madd2(m, 0, z[8], C)
		C, z[8] = madd2(m, 0, z[9], C)
		C, z[9] = madd2(m, 0, z[10], C)
		C, z[10] = madd2(m, 0, z[11], C)
		C, z[11] = madd2(m, 0, z[12], C)
		C, z[12] = madd2(m, 0, z[13], C)
		C, z[13] = madd2(m, 0, z[14], C)
		C, z[14] = madd2(m, 144115188075855872, z[15], C)
		z[15] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 9354599007894202009
		C := madd0(m, 422487, z[0])
		C, z[0] = madd2(m, 0, z[1], C)
		C, z[1] = madd2(m, 0, z[2], C)
		C, z[2] = madd2(m, 0, z[3], C)
		C, z[3] = madd2(m, 0, z[4], C)
		C, z[4] = madd2(m, 0, z[5], C)
		C, z[5] = madd2(m, 0, z[6], C)
		C, z[6] = madd2(m, 0, z[7], C)
		C, z[7] = madd2(m, 0, z[8], C)
		C, z[8] = madd2(m, 0, z[9], C)
		C, z[9] = madd2(m, 0, z[10], C)
		C, z[10] = madd2(m, 0, z[11], C)
		C, z[11] = madd2(m, 0, z[12], C)
		C, z[12] = madd2(m, 0, z[13], C)
		C, z[13] = madd2(m, 0, z[14], C)
		C, z[14] = madd2(m, 144115188075855872, z[15], C)
		z[15] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 9354599007894202009
		C := madd0(m, 422487, z[0])
		C, z[0] = madd2(m, 0, z[1], C)
		C, z[1] = madd2(m, 0, z[2], C)
		C, z[2] = madd2(m, 0, z[3], C)
		C, z[3] = madd2(m, 0, z[4], C)
		C, z[4] = madd2(m, 0, z[5], C)
		C, z[5] = madd2(m, 0, z[6], C)
		C, z[6] = madd2(m, 0, z[7], C)
		C, z[7] = madd2(m, 0, z[8], C)
		C, z[8] = madd2(m, 0, z[9], C)
		C, z[9] = madd2(m, 0, z[10], C)
		C, z[10] = madd2(m, 0, z[11], C)
		C, z[11] = madd2(m, 0, z[12], C)
		C, z[12] = madd2(m, 0, z[13], C)
		C, z[13] = madd2(m, 0, z[14], C)
		C, z[14] = madd2(m, 144115188075855872, z[15], C)
		z[15] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 9354599007894202009
		C := madd0(m, 422487, z[0])
		C, z[0] = madd2(m, 0, z[1], C)
		C, z[1] = madd2(m, 0, z[2], C)
		C, z[2] = madd2(m, 0, z[3], C)
		C, z[3] = madd2(m, 0, z[4], C)
		C, z[4] = madd2(m, 0, z[5], C)
		C, z[5] = madd2(m, 0, z[6], C)
		C, z[6] = madd2(m, 0, z[7], C)
		C, z[7] = madd2(m, 0, z[8], C)
		C, z[8] = madd2(m, 0, z[9], C)
		C, z[9] = madd2(m, 0, z[10], C)
		C, z[10] = madd2(m, 0, z[11], C)
		C, z[11] = madd2(m, 0, z[12], C)
		C, z[12] = madd2(m, 0, z[13], C)
		C, z[13] = madd2(m, 0, z[14], C)
		C, z[14] = madd2(m, 144115188075855872, z[15], C)
		z[15] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 9354599007894202009
		C := madd0(m, 422487, z[0])
		C, z[0] = madd2(m, 0, z[1], C)
		C, z[1] = madd2(m, 0, z[2], C)
		C, z[2] = madd2(m, 0, z[3], C)
		C, z[3] = madd2(m, 0, z[4], C)
		C, z[4] = madd2(m, 0, z[5], C)
		C, z[5] = madd2(m, 0, z[6], C)
		C, z[6] = madd2(m, 0, z[7], C)
		C, z[7] = madd2(m, 0, z[8], C)
		C, z[8] = madd2(m, 0, z[9], C)
		C, z[9] = madd2(m, 0, z[10], C)
		C, z[10] = madd2(m, 0, z[11], C)
		C, z[11] = madd2(m, 0, z[12], C)
		C, z[12] = madd2(m, 0, z[13], C)
		C, z[13] = madd2(m, 0, z[14], C)
		C, z[14] = madd2(m, 144115188075855872, z[15], C)
		z[15] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 9354599007894202009
		C := madd0(m, 422487, z[0])
		C, z[0] = madd2(m, 0, z[1], C)
		C, z[1] = madd2(m, 0, z[2], C)
		C, z[2] = madd2(m, 0, z[3], C)
		C, z[3] = madd2(m, 0, z[4], C)
		C, z[4] = madd2(m, 0, z[5], C)
		C, z[5] = madd2(m, 0, z[6], C)
		C, z[6] = madd2(m, 0, z[7], C)
		C, z[7] = madd2(m, 0, z[8], C)
		C, z[8] = madd2(m, 0, z[9], C)
		C, z[9] = madd2(m, 0, z[10], C)
		C, z[10] = madd2(m, 0, z[11], C)
		C, z[11] = madd2(m, 0, z[12], C)
		C, z[12] = madd2(m, 0, z[13], C)
		C, z[13] = madd2(m, 0, z[14], C)
		C, z[14] = madd2(m, 144115188075855872, z[15], C)
		z[15] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 9354599007894202009
		C := madd0(m, 422487, z[0])
		C, z[0] = madd2(m, 0, z[1], C)
		C, z[1] = madd2(m, 0, z[2], C)
		C, z[2] = madd2(m, 0, z[3], C)
		C, z[3] = madd2(m, 0, z[4], C)
		C, z[4] = madd2(m, 0, z[5], C)
		C, z[5] = madd2(m, 0, z[6], C)
		C, z[6] = madd2(m, 0, z[7], C)
		C, z[7] = madd2(m, 0, z[8], C)
		C, z[8] = madd2(m, 0, z[9], C)
		C, z[9] = madd2(m, 0, z[10], C)
		C, z[10] = madd2(m, 0, z[11], C)
		C, z[11] = madd2(m, 0, z[12], C)
		C, z[12] = madd2(m, 0, z[13], C)
		C, z[13] = madd2(m, 0, z[14], C)
		C, z[14] = madd2(m, 144115188075855872, z[15], C)
		z[15] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 9354599007894202009
		C := madd0(m, 422487, z[0])
		C, z[0] = madd2(m, 0, z[1], C)
		C, z[1] = madd2(m, 0, z[2], C)
		C, z[2] = madd2(m, 0, z[3], C)
		C, z[3] = madd2(m, 0, z[4], C)
		C, z[4] = madd2(m, 0, z[5], C)
		C, z[5] = madd2(m, 0, z[6], C)
		C, z[6] = madd2(m, 0, z[7], C)
		C, z[7] = madd2(m, 0, z[8], C)
		C, z[8] = madd2(m, 0, z[9], C)
		C, z[9] = madd2(m, 0, z[10], C)
		C, z[10] = madd2(m, 0, z[11], C)
		C, z[11] = madd2(m, 0, z[12], C)
		C, z[12] = madd2(m, 0, z[13], C)
		C, z[13] = madd2(m, 0, z[14], C)
		C, z[14] = madd2(m, 144115188075855872, z[15], C)
		z[15] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 9354599007894202009
		C := madd0(m, 422487, z[0])
		C, z[0] = madd2(m, 0, z[1], C)
		C, z[1] = madd2(m, 0, z[2], C)
		C, z[2] = madd2(m, 0, z[3], C)
		C, z[3] = madd2(m, 0, z[4], C)
		C, z[4] = madd2(m, 0, z[5], C)
		C, z[5] = madd2(m, 0, z[6], C)
		C, z[6] = madd2(m, 0, z[7], C)
		C, z[7] = madd2(m, 0, z[8], C)
		C, z[8] = madd2(m, 0, z[9], C)
		C, z[9] = madd2(m, 0, z[10], C)
		C, z[10] = madd2(m, 0, z[11], C)
		C, z[11] = madd2(m, 0, z[12], C)
		C, z[12] = madd2(m, 0, z[13], C)
		C, z[13] = madd2(m, 0, z[14], C)
		C, z[14] = madd2(m, 144115188075855872, z[15], C)
		z[15] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 9354599007894202009
		C := madd0(m, 422487, z[0])
		C, z[0] = madd2(m, 0, z[1], C)
		C, z[1] = madd2(m, 0, z[2], C)
		C, z[2] = madd2(m, 0, z[3], C)
		C, z[3] = madd2(m, 0, z[4], C)
		C, z[4] = madd2(m, 0, z[5], C)
		C, z[5] = madd2(m, 0, z[6], C)
		C, z[6] = madd2(m, 0, z[7], C)
		C, z[7] = madd2(m, 0, z[8], C)
		C, z[8] = madd2(m, 0, z[9], C)
		C, z[9] = madd2(m, 0, z[10], C)
		C, z[10] = madd2(m, 0, z[11], C)
		C, z[11] = madd2(m, 0, z[12], C)
		C, z[12] = madd2(m, 0, z[13], C)
		C, z[13] = madd2(m, 0, z[14], C)
		C, z[14] = madd2(m, 144115188075855872, z[15], C)
		z[15] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 9354599007894202009
		C := madd0(m, 422487, z[0])
		C, z[0] = madd2(m, 0, z[1], C)
		C, z[1] = madd2(m, 0, z[2], C)
		C, z[2] = madd2(m, 0, z[3], C)
		C, z[3] = madd2(m, 0, z[4], C)
		C, z[4] = madd2(m, 0, z[5], C)
		C, z[5] = madd2(m, 0, z[6], C)
		C, z[6] = madd2(m, 0, z[7], C)
		C, z[7] = madd2(m, 0, z[8], C)
		C, z[8] = madd2(m, 0, z[9], C)
		C, z[9] = madd2(m, 0, z[10], C)
		C, z[10] = madd2(m, 0, z[11], C)
		C, z[11] = madd2(m, 0, z[12], C)
		C, z[12] = madd2(m, 0, z[13], C)
		C, z[13] = madd2(m, 0, z[14], C)
		C, z[14] = madd2(m, 144115188075855872, z[15], C)
		z[15] = C
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[15] < 144115188075855872 || (z[15] == 144115188075855872 && (z[14] < 0 || (z[14] == 0 && (z[13] < 0 || (z[13] == 0 && (z[12] < 0 || (z[12] == 0 && (z[11] < 0 || (z[11] == 0 && (z[10] < 0 || (z[10] == 0 && (z[9] < 0 || (z[9] == 0 && (z[8] < 0 || (z[8] == 0 && (z[7] < 0 || (z[7] == 0 && (z[6] < 0 || (z[6] == 0 && (z[5] < 0 || (z[5] == 0 && (z[4] < 0 || (z[4] == 0 && (z[3] < 0 || (z[3] == 0 && (z[2] < 0 || (z[2] == 0 && (z[1] < 0 || (z[1] == 0 && (z[0] < 422487))))))))))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 422487, 0)
		z[1], b = bits.Sub64(z[1], 0, b)
		z[2], b = bits.Sub64(z[2], 0, b)
		z[3], b = bits.Sub64(z[3], 0, b)
		z[4], b = bits.Sub64(z[4], 0, b)
		z[5], b = bits.Sub64(z[5], 0, b)
		z[6], b = bits.Sub64(z[6], 0, b)
		z[7], b = bits.Sub64(z[7], 0, b)
		z[8], b = bits.Sub64(z[8], 0, b)
		z[9], b = bits.Sub64(z[9], 0, b)
		z[10], b = bits.Sub64(z[10], 0, b)
		z[11], b = bits.Sub64(z[11], 0, b)
		z[12], b = bits.Sub64(z[12], 0, b)
		z[13], b = bits.Sub64(z[13], 0, b)
		z[14], b = bits.Sub64(z[14], 0, b)
		z[15], _ = bits.Sub64(z[15], 144115188075855872, b)
	}
}

// Exp z = x^exponent mod q
func (z *Element) Exp(x Element, exponent *big.Int) *Element {
	var bZero big.Int
	if exponent.Cmp(&bZero) == 0 {
		return z.SetOne()
	}

	z.Set(&x)

	for i := exponent.BitLen() - 2; i >= 0; i-- {
		z.Square(z)
		if exponent.Bit(i) == 1 {
			z.Mul(z, &x)
		}
	}

	return z
}

// ToMont converts z to Montgomery form
// sets and returns z = z * r^2
func (z *Element) ToMont() *Element {
	return z.Mul(z, &rSquare)
}

// ToRegular returns z in regular form (doesn't mutate z)
func (z Element) ToRegular() Element {
	return *z.FromMont()
}

// String returns the string form of an Element in Montgomery form
func (z *Element) String() string {
	var _z big.Int
	return z.ToBigIntRegular(&_z).String()
}

// ToBigInt returns z as a big.Int in Montgomery form
func (z *Element) ToBigInt(res *big.Int) *big.Int {
	var b [Limbs * 8]byte
	binary.BigEndian.PutUint64(b[120:128], z[0])
	binary.BigEndian.PutUint64(b[112:120], z[1])
	binary.BigEndian.PutUint64(b[104:112], z[2])
	binary.BigEndian.PutUint64(b[96:104], z[3])
	binary.BigEndian.PutUint64(b[88:96], z[4])
	binary.BigEndian.PutUint64(b[80:88], z[5])
	binary.BigEndian.PutUint64(b[72:80], z[6])
	binary.BigEndian.PutUint64(b[64:72], z[7])
	binary.BigEndian.PutUint64(b[56:64], z[8])
	binary.BigEndian.PutUint64(b[48:56], z[9])
	binary.BigEndian.PutUint64(b[40:48], z[10])
	binary.BigEndian.PutUint64(b[32:40], z[11])
	binary.BigEndian.PutUint64(b[24:32], z[12])
	binary.BigEndian.PutUint64(b[16:24], z[13])
	binary.BigEndian.PutUint64(b[8:16], z[14])
	binary.BigEndian.PutUint64(b[0:8], z[15])

	return res.SetBytes(b[:])
}

// ToBigIntRegular returns z as a big.Int in regular form
func (z Element) ToBigIntRegular(res *big.Int) *big.Int {
	z.FromMont()
	return z.ToBigInt(res)
}

// SetBigInt sets z to v (regular form) and returns z in Montgomery form
func (z *Element) SetBigInt(v *big.Int) *Element {
	z.SetZero()

	var zero big.Int
	q := Modulus()

	// fast path
	c := v.Cmp(q)
	if c == 0 {
		// v == 0
		return z
	} else if c != 1 && v.Cmp(&zero) != -1 {
		// 0 < v < q
		return z.setBigInt(v)
	}

	// copy input + modular reduction
	vv := new(big.Int).Set(v)
	vv.Mod(v, q)

	return z.setBigInt(vv)
}

// setBigInt assumes 0 <= v < q
func (z *Element) setBigInt(v *big.Int) *Element {
	vBits := v.Bits()

	if bits.UintSize == 64 {
		for i := 0; i < len(vBits); i++ {
			z[i] = uint64(vBits[i])
		}
	} else {
		for i := 0; i < len(vBits); i++ {
			if i%2 == 0 {
				z[i/2] = uint64(vBits[i])
			} else {
				z[i/2] |= uint64(vBits[i]) << 32
			}
		}
	}

	return z.ToMont()
}

// SetString creates a big.Int with s (in base 10) and calls SetBigInt on z
func (z *Element) SetString(s string) *Element {
	x, ok := new(big.Int).SetString(s, 10)
	if !ok {
		panic("Element.SetString failed -> can't parse number in base10 into a big.Int")
	}
	return z.SetBigInt(x)
}

var (
	_bLegendreExponentElement *big.Int
	_bSqrtExponentElement     *big.Int
)

func init() {
	_bLegendreExponentElement, _ = new(big.Int).SetString("10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003392b", 16)
	const sqrtExponentElement = "80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000019c96"
	_bSqrtExponentElement, _ = new(big.Int).SetString(sqrtExponentElement, 16)
}

// Legendre returns the Legendre symbol of z (either +1, -1, or 0.)
func (z *Element) Legendre() int {
	var l Element
	// z^((q-1)/2)
	l.Exp(*z, _bLegendreExponentElement)

	if l.IsZero() {
		return 0
	}

	// if l == 1
	if (l[15] == 144115188075855871) && (l[14] == 18446744073709551615) && (l[13] == 18446744073709551615) && (l[12] == 18446744073709551615) && (l[11] == 18446744073709551615) && (l[10] == 18446744073709551615) && (l[9] == 18446744073709551615) && (l[8] == 18446744073709551615) && (l[7] == 18446744073709551615) && (l[6] == 18446744073709551615) && (l[5] == 18446744073709551615) && (l[4] == 18446744073709551615) && (l[3] == 18446744073709551615) && (l[2] == 18446744073709551615) && (l[1] == 18446744073709551615) && (l[0] == 18446744073655895767) {
		return 1
	}
	return -1
}

// Sqrt z = √x mod q
// if the square root doesn't exist (x is not a square mod q)
// Sqrt leaves z unchanged and returns nil
func (z *Element) Sqrt(x *Element) *Element {
	// q ≡ 3 (mod 4)
	// using  z ≡ ± x^((p+1)/4) (mod q)
	var y, square Element
	y.Exp(*x, _bSqrtExponentElement)
	// as we didn't compute the legendre symbol, ensure we found y such that y * y = x
	square.Square(&y)
	if square.Equal(x) {
		return z.Set(&y)
	}
	return nil
}

// Inverse z = x^-1 mod q
// note: allocates a big.Int (math/big)
func (z *Element) Inverse(x *Element) *Element {
	var _xNonMont big.Int
	x.ToBigIntRegular(&_xNonMont)
	_xNonMont.ModInverse(&_xNonMont, Modulus())
	z.SetBigInt(&_xNonMont)
	return z
}
